import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as i,c as o,b as e,d as r,e as d,h as a}from"./app-mpCzIelQ.js";const l={},p=a('<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p><ol><li>Redis是一个<code>开源</code>的<code>key-value</code>存储系统</li><li>和Memcached类似，它支持存储的value类型相对更多,包括<code>string</code>(字符串)、<code>list</code>(链表)、<code>set</code>(集合)、 <code>zset</code>(sorted set --有序集合)和<code>hash </code>(哈希类型)</li><li>这些数据类型都支持push/pop、 add/remove 及取交集并集和差集及更丰富的操作,而且这些操作都是<code>原子性</code>的</li><li>在此基础上， Redis支持各种不同方式的<code>排序</code></li><li>与memcached一样，为了保证效率，数据都是<code>缓存在内存</code>中</li><li>区别的是Redis会<code>周期性</code>的把更新的<code>数据写入磁盘</code>或者把修改操作写入追加的记录文件</li><li>并且在此基础上实现了<code>master-slave（主从）</code>同步</li></ol><blockquote><p>Redis</p></blockquote>',6),c={href:"https://juejin.cn/post/6882984260672847879",target:"_blank",rel:"noopener noreferrer"},g=a(`<p><mark>单线程+多路IO复用</mark></p><p>简单理解就是：一个服务端进程可以同时处理多个套接字描述符。 多路：多个客户端连接（连接就是套接字描述符） 复用：使用单进程就能够实现同时处理多个客户端的连接 以上是通过增加进程和线程的数量来并发处理多个套接字，免不了上下文切换的开销，而 IO 多路复用只需要一个进程就能够处理多个套接字，从而解决了上下文切换的问题。 其发展可以分 select-&gt;poll→epoll 三个阶段来描述。</p><blockquote><p>五大数据类型</p></blockquote><ol><li>字符串(String)</li><li>列表(List)</li><li>集合(Set)</li><li>哈希(Hash)</li><li>有序集合(Zset)</li></ol><h2 id="命令操作" tabindex="-1"><a class="header-anchor" href="#命令操作"><span>命令操作</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># redis自带的客户端</span>
redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有给redis设置密码，需要先验证一下才能操作redis</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> auth root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="键key" tabindex="-1"><a class="header-anchor" href="#键key"><span>键key</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>keys * <span class="token comment"># 查看数据库中所有的key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195351415.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>exists <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment"># 查看key是否存在，返回值为key的数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195510061.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">type</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment"># 查看key是什么类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195614578.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>del <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment"># 删除key，返回删除个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195742144.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>unlink <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment"># 根据value选择非阻塞删除，先通知删除该key，后续在删除内存中的key，异步执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>expire <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token comment"># 设置key的过期时间，单位秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200044843.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ttl <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment"># 查看key过期时间，-1表示永不过期，-2表示已经过期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200218937.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">select</span> <span class="token punctuation">(</span>库序号<span class="token punctuation">)</span> <span class="token comment"># 切换库，redis有16个库，默认是0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200422509.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dbsize <span class="token comment">#查看当前数据库key的数量，返回个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200538584.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>flushdb <span class="token comment">#清除当前库</span>
flushall <span class="token comment">#清除全部库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200724046.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串"><span>String(字符串)</span></a></h3><p>String类型是(<code>二进制安全的</code>)，可以包含任何数据</p><p>Srting类型是Redis最基本的数据类型，一个Redis中字符串的value最多可以是<code>512M</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#设置一个key，value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201205040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>get <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#根据key获取value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201144079.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>append <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#在对应key的value后面追加数据，返回总长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201438649.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>strlen <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#获取值的长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>setnx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#设置值，当键存在时不进行设置，键不存在才进行设置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201640465.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>incr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#将key中存储的值+1，返回增加后的值，只能对数字值进行操作，如果为空，新增值为1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201951902.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>decr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#将key中存储的值-1，返回减少后的值，只能对数字值进行操作，如果为空，新增值为-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608202009173.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>incrby/decrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>步长<span class="token operator">&gt;</span> <span class="token comment">#将key中的值进行增减，长度为步长</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608202320342.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>增减操作都是原子性操作：</code>Redis而言，命令的原子性指的是：一个操作的不可以再分，操作要么执行，要么不执行。</p><p>Redis的操作之所以是原子性的，是因为Redis是单线程的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mset <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>. <span class="token comment">#同时对多对k-v进行赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mget <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span> <span class="token punctuation">..</span>. <span class="token comment">#同时获取多个value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205325643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>msetnx <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>. <span class="token comment">#同时设置多对值，当值存在时不进行设置，值不存在才进行设置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205433667.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>msetnx同时设置多对值时，<code>原子性操作，要么都成功要么都不成功</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#获取值的范围，类似Java中的substring，前后都为闭区间</span>
getrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>起始位置<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>结束位置<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608204654354.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#根据起始位置，将key中的值覆盖为value</span>
setrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>起始位置<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608204850347.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>setex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>过期时间<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#设置k-v的同时设置过期时间，单位s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205041973.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>getset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#设置新值的同时，获取旧值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205208369.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>String的底层结构为简单的动态字符串，内部结构类似与Java的ArrayList，才用预分配冗余空间的方式，来减少内存的频繁操作</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205748834.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时,扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间，需要注意的是字符串最大长度为512M</p><h3 id="hash-哈希" tabindex="-1"><a class="header-anchor" href="#hash-哈希"><span>Hash(哈希)</span></a></h3><p>hash是一个键值对集合</p><p>hash是一个string类型的field和value的映射表，hash特别适用于存储对象，类似Java的Map&lt;string, object&gt;</p><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储</p><p>主要有以下两种存储方式：</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609083637032.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>将对象系列化，存储序列化过后的对象，每次修改对象需要先反序列化，修改完数据后在序列化回去</li><li>普通键值对，键是用户id+属性标签，值是属性值，id数据冗余</li></ol><p>第三种方式：</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609084123574.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>user为key，属性标签跟属性值是value</code>，存储方便，值的操作方便</p><blockquote><p>命令</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filed<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>filed value<span class="token punctuation">..</span><span class="token punctuation">]</span> <span class="token comment">#&lt;key&gt;是hash的键，&lt;filed&gt;是value的键,&lt;value&gt;是值，可以批量设置，如果hash的key不存在则创建新的hash，如果key存在则创建失败</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090246702.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hget <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filed<span class="token operator">&gt;</span> <span class="token comment">#根据filed获取value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609085303174.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hmset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filed<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>filed value <span class="token punctuation">..</span><span class="token punctuation">]</span> <span class="token comment">#可以批量设置hash，如果key存在，filed相同则覆盖对应的value，否则创建一个新的hash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090153249.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hmget <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filed<span class="token operator">&gt;</span> <span class="token punctuation">[</span>filed <span class="token punctuation">..</span><span class="token punctuation">]</span> <span class="token comment">#批量获取value，如果filed不存在返回nil，存在返回对应的value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090601964.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hexists <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>filed<span class="token operator">&gt;</span> <span class="token comment">#判断对应的key是否存在filed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090842631.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hkeys <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#查询对应的key的所有filed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091359018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hvals <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment">#查询对应key的所有value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091406370.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hincrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>increment<span class="token operator">&gt;</span> <span class="token comment">#为hash的key中的field的值增加或减少increment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091540299.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hsetnx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment">#为对应key添加filed和value，只有filed不存在时才会成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091830402.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Hash类型对应的数据结构有两种：ziplist(压缩列表)，hashtable(哈希表)。当field-value长度较短且个数较少时，使用ziphash，否则使用hashtable</p><h3 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表"><span>List(列表)</span></a></h3><p>单键多值</p><p>redis列表是简单的字符串列表，按照插入顺序排序，可以插入一个元素到列表的头部(左边)或者尾部(右边)</p><p>列表类型内部使用<code>双向链表</code>实现的，所以向列表两端添加元素的时间复杂度为O(1)，获取越接近两端的元素速度越快。但是使用链表的代价是通过索引访问元素比较慢。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608210412685.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>命令</p></blockquote><table><thead><tr><th>命令</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>lpush</td><td>lpush key value [value ...]</td><td>（1）将一个或多个值插入到列表key的表头； （2）如果有多个value值，则从左到右的顺序依次插入表头； （3）如果key不存在，则会创建一个空列表，然后执行lpush操作；如果key存在，但不是列表类型，则返回错误。</td></tr><tr><td>lpushx</td><td>lpushx key value</td><td>（1）将value值插入到列表key的表头，当且仅当key存在且是一个列表； （2）如果key不存在时，lpushx命令什么都不会做。</td></tr><tr><td>lpop</td><td>lpop key</td><td>（1）移除并返回列表key的头元素。</td></tr><tr><td>lrange</td><td>lrange key start stop</td><td>（1）返回列表key中指定区间内的元素； （2）start大于列表最大下标是，返回空列表； （3）可使用负数下标，-1表示列表最后一个元素，以此类推。</td></tr><tr><td>lrem</td><td>lrem key count value</td><td>（1）count&gt;0表示从头到尾搜索，移除与value相等的元素，数量为count； （2）count&lt;0表示从尾到头搜索，移除与value相等的元素，数量为count； （3）count=0表示移除列表中所有与value相等的元素。</td></tr><tr><td>lset</td><td>lset key index value</td><td>（1）将列表key下标为index的元素值设置为value； （2）当index参数超出范围，或对一个空列表进行lset操作时，返回错误。</td></tr><tr><td>lindex</td><td>lindex key index</td><td>（1）返回列表key中下标为index的元素。</td></tr><tr><td>linsert</td><td>linsert key BEFORE|AFTER pivot value</td><td>（1）将值value插入列表key中，位于pivot前面或者后面； （2）当pivot不存在列表key中，或者key不存在时，不执行任何操作。</td></tr><tr><td>llen</td><td>len key</td><td>（1）返回列表key的长度，当key不存在时，返回0。</td></tr><tr><td>rpop</td><td>rpop key</td><td>（1）移除并返回列表key的尾元素。</td></tr><tr><td>rpoplpush</td><td>rpoplpush source destination</td><td>（1）将列表source中最后一个元素弹出并返回给客户端，并且将该元素插入到列表destincation的头部。</td></tr><tr><td>rpush</td><td>rpush key value [value ...]</td><td>（1）将一个或多个值插入到列表key的尾部。</td></tr><tr><td>rpushx</td><td>rpushx key value</td><td>（1）将value值插入到列表key的表尾，当且仅当key存在且是一个列表； （2）如果key不存在时，lpushx命令什么都不会做。</td></tr></tbody></table><p><mark>总结：</mark></p><ol><li>它是一个字符串链表，left 和 right 都可以插入、添加</li><li>如果键不存在，创建新的链表</li><li>如果键已存在，新增内容</li><li>如果值全移除，对应的键也就消失了</li><li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了</li></ol><h3 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合"><span>Set(集合)</span></a></h3><p>Redis中的set类型是string类型的<code>无序集合</code>。集合类型的常用操作是向集合中加入或删除元素、判断某个元素是否存在等，由于集合类型在Redis内部是使用值为空的散列表实现的，所以这些操作的时间复杂度都是O(1)。最方便的是多个集合类型键之间还可以进行并集、交集和差集运算。</p><blockquote><p>命令</p></blockquote><table><thead><tr><th>命令</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>sadd</td><td>sadd key member [member ...]</td><td>（1）将一个或多个member元素加入key中，已存在在集合中的member将被忽略； （2）如果key不存在，则创建一个只包含member元素的集合； （3）当key不是集合类型时，将返回一个错误。</td></tr><tr><td>scard</td><td>scard key</td><td>（1）返回key对应的集合中的元素数量。</td></tr><tr><td>sdiff</td><td>sdiff key [key ...]</td><td>（1）返回所有key对应的集合的差集。</td></tr><tr><td>sdiffstore</td><td>sdiffstore destionation key [key ...]</td><td>（1）返回所有key对应的集合的差集，并把该差集赋值给destionation； （2）如果destionation已经存在，则直接覆盖。</td></tr><tr><td>sinter</td><td>sinter key [key ...]</td><td>（1）返回所有key对应的集合的交集； （2）不存在的key被视为空集。</td></tr><tr><td>sinterstore</td><td>sinter destionation key [key ...]</td><td>（1）返回所有key对应的集合的交集，并把该交集赋值给destionation； （2）如果destionation已经存在，则直接覆盖。</td></tr><tr><td>sismember</td><td>sismember key member</td><td>（1）判断member元素是否是key的成员，0表示不是，1表示是。</td></tr><tr><td>smembers</td><td>smember key</td><td>（1）返回集合key中的所有成员； （2）不存在的key被视为空集。</td></tr><tr><td>srem</td><td>srem key member [member ...]</td><td>（1）移除集合key中的一个或多个member元素，不存在的member将被忽略。</td></tr><tr><td>sunion</td><td>sunion key [key ...]</td><td>（1）返回所有key对应的集合的并集； （2）不存在的key被视为空集。</td></tr><tr><td>sunionstore</td><td>sunionstore destionation key [key ...]</td><td>（1）返回所有key对应的集合的并集，并把该并集赋值给destionation； （2）如果destionation已经存在，则直接覆盖。</td></tr></tbody></table><h3 id="zset-sorted-set有序集合" tabindex="-1"><a class="header-anchor" href="#zset-sorted-set有序集合"><span>Zset(sorted set有序集合)</span></a></h3><p>zset类型也是string类型元素的集合，但是它是<code>有序</code>的。</p><table><thead><tr><th>命令</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>zadd</td><td>zadd key score member [score member ...]</td><td>（1）将一个或多个member元素及其score值加入集合key中； （2）如果member已经是有序集合的元素，那么更新member对应的score并重新插入member保证member在正确的位置上； （3）score可以是整数也可以是双精度浮点数。</td></tr><tr><td>zcard</td><td>zcard key</td><td>（1）返回有序集的元素个数。</td></tr><tr><td>zcount</td><td>zcount key min max</td><td>（1）返回有序集key中，score值&gt;=min且&lt;=max的成员数量</td></tr><tr><td>zrange</td><td>zrange key start stop [withscores]</td><td>（1）返回有序集key中指定区间内的成员，成员位置按score从小到大排序； （2）如果score值相同，则按字典排序； （3）如果要使成员按score从大到小排序，则使用zrevrange命令。</td></tr><tr><td>zrank</td><td>zrank key number</td><td>（1）返回有序集key中成员member的排名，有序集合按score值从小到大排列； （2）zrevrank命令将按照score值从大到小排序。</td></tr><tr><td>zrem</td><td>zrem key member [member ...]</td><td>（1）移除有序集key中的一个或多个元素，不存在的元素将被忽略； （2）当key存在但不是有序集时，返回错误。</td></tr><tr><td>zremrangebyrank</td><td>zremrangerank key start stop</td><td>（1）移除有序集key中指定排名区间内的所有元素。</td></tr><tr><td>zremrangebyscore</td><td>zremrangescore key min max</td><td>（1）移除有序集key中所有score值&gt;=min且&lt;=max之间的元素。</td></tr></tbody></table>`,112);function m(u,h){const t=n("ExternalLinkIcon");return i(),o("div",null,[p,e("p",null,[e("a",c,[r("文档"),d(t)])]),g])}const v=s(l,[["render",m],["__file","basic.html.vue"]]),y=JSON.parse('{"path":"/code/redis/basic.html","title":"Redis介绍","lang":"zh-CN","frontmatter":{"order":1,"title":"Redis介绍","date":"2022-01-14T00:00:00.000Z","category":["Redis","分布式"],"tag":["Redis","分布式"],"timeline":true,"article":true,"prev":"./","description":"REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。 概述 Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/redis/basic.html"}],["meta",{"property":"og:title","content":"Redis介绍"}],["meta",{"property":"og:description","content":"REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。 概述 Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195351415.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T03:35:17.000Z"}],["meta",{"property":"article:author","content":"Du"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:published_time","content":"2022-01-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T03:35:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis介绍\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195351415.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195510061.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195614578.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608195742144.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200044843.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200218937.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200422509.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200538584.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608200724046.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201205040.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201144079.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201438649.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201640465.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608201951902.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608202009173.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608202320342.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205325643.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205433667.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608204654354.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608204850347.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205041973.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205208369.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608205748834.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609083637032.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609084123574.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090246702.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609085303174.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090153249.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090601964.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609090842631.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091359018.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091406370.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091540299.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210609091830402.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210608210412685.png\\"],\\"datePublished\\":\\"2022-01-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-13T03:35:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Du\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"命令操作","slug":"命令操作","link":"#命令操作","children":[{"level":3,"title":"键key","slug":"键key","link":"#键key","children":[]},{"level":3,"title":"库","slug":"库","link":"#库","children":[]},{"level":3,"title":"String(字符串)","slug":"string-字符串","link":"#string-字符串","children":[]},{"level":3,"title":"Hash(哈希)","slug":"hash-哈希","link":"#hash-哈希","children":[]},{"level":3,"title":"List(列表)","slug":"list-列表","link":"#list-列表","children":[]},{"level":3,"title":"Set(集合)","slug":"set-集合","link":"#set-集合","children":[]},{"level":3,"title":"Zset(sorted set有序集合)","slug":"zset-sorted-set有序集合","link":"#zset-sorted-set有序集合","children":[]}]}],"git":{"createdTime":1717727796000,"updatedTime":1718249717000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":11.93,"words":3580},"filePathRelative":"code/redis/basic.md","localizedDate":"2022年1月14日","excerpt":"<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。</p>","autoDesc":true}');export{v as comp,y as data};
