import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,b as n,d as s,e,h as t}from"./app-DTefKdU9.js";const r={},i=n("h1",{id:"位运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#位运算"},[n("span",null,"位运算")])],-1),u={href:"https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"位操作符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#位操作符"},[n("span",null,"位操作符")])],-1),m=n("li",null,[n("p",null,[s("& 与运算 两个位都是 1 时，结果才为 1，否则为 0，如 1 0 0 1 1 & 1 1 0 0 1 "),n("code",null,"------------------------------"),s(" 1 0 0 0 1")])],-1),b=n("li",null,[n("p",null,[s("| 或运算 两个位都是 0 时，结果才为 0，否则为 1，如 1 0 0 1 1 | 1 1 0 0 1 "),n("code",null,"------------------------------"),s(" 1 1 0 1 1")])],-1),v={href:"https://www.zhihu.com/search?q=%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"-----------------------------",-1),g=n("li",null,[n("p",null,[s("~ 取反运算，0 则变为 1，1 则变为 0，如 ~ 1 0 0 1 1 "),n("code",null,"-----------------------------"),s(" 0 1 1 0 0")])],-1),_=n("li",null,[n("p",null,"<< 左移运算，向左进行移位操作，高位丢弃，低位补 0，如")],-1),y=t(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
a <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
移位前：<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1000</span>
移位后：<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0100</span> <span class="token number">0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt;&gt; 右移运算，向右进行移位操作，对无符号数，高位补 0，对于有符号数，高位补符号位，如</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
a <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
移位前：<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1000</span>
移位后：<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>
a <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
移位前：<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1000</span>
移位前：<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见位运算问题" tabindex="-1"><a class="header-anchor" href="#常见位运算问题"><span>常见位运算问题</span></a></h2><h3 id="_1-位操作实现乘除法" tabindex="-1"><a class="header-anchor" href="#_1-位操作实现乘除法"><span>1. 位操作实现乘除法</span></a></h3><ul><li>数 a 向右移一位，相当于将 a 除以 2；数 a 向左移一位，相当于将 a 乘以 2</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token number">1</span>
a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-位操作交换两数" tabindex="-1"><a class="header-anchor" href="#_2-位操作交换两数"><span>2. 位操作交换两数</span></a></h3><ul><li>位操作交换两数可以不需要第三个临时变量，虽然普通操作也可以做到，但是没有其效率高</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//普通操作</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
  a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//位与操作</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">^=</span> b<span class="token punctuation">;</span>
  b <span class="token operator">^=</span> a<span class="token punctuation">;</span>
  a <span class="token operator">^=</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>位与操作解释：第一步：a ^= b ---&gt; a = (a^b);</p><p>第二步：b ^= a ---&gt; b = b<sup>(a</sup>b) ---&gt; b = (b<sup>b)</sup>a = a</p><p>第三步：a ^= b ---&gt; a = (a<sup>b)</sup>a = (a<sup>a)</sup>b = b</p>`,13),f={id:"_3-位操作判断奇偶数",tabindex:"-1"},w={class:"header-anchor",href:"#_3-位操作判断奇偶数"},x={href:"https://www.zhihu.com/search?q=%E5%A5%87%E5%81%B6%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},E=t(`<ul><li>只要根据数的最后一位是 0 还是 1 来决定即可，为 0 就是偶数，为 1 就是奇数。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//偶数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-位操作交换符号" tabindex="-1"><a class="header-anchor" href="#_4-位操作交换符号"><span>4. 位操作交换符号</span></a></h3><ul><li>交换符号将正数变成负数，负数变成正数</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">reversal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">~</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整数取反加1，正好变成其对应的负数(补码表示)；负数取反加一，则变为其原码，即正数</p>`,6),B={id:"_5-位操作求绝对值",tabindex:"-1"},A={class:"header-anchor",href:"#_5-位操作求绝对值"},C={href:"https://www.zhihu.com/search?q=%E7%BB%9D%E5%AF%B9%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},F=t(`<ul><li>整数的绝对值是其本身，负数的绝对值正好可以对其进行取反加一求得，即我们首先判断其符号位（整数右移 31 位得到 0，负数右移 31 位得到 -1,即 0xffffffff），然后根据符号进行相应的操作</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">~</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作可以进行优化，可以将 i == 0 的条件判断语句去掉。我们都知道符号位 i 只有两种情况，即 i = 0 为正，i = -1 为负。对于任何数与 0 异或都会保持不变，与 -1 即 0xffffffff 进行异或就相当于对此数进行取反,因此可以将上面三目元算符转换为((a^i)-i)，即整数时 a 与 0 异或得到本身，再减去 0，负数时与 0xffffffff 异或将 a 进行取反，然后在加上 1，即减去 i(i =-1)</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">abs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">^</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-位操作进行高低位交换" tabindex="-1"><a class="header-anchor" href="#_6-位操作进行高低位交换"><span>6. 位操作进行高低位交换</span></a></h3><ul><li>给定一个 16 位的无符号整数，将其高 8 位与低 8 位进行交换，求出交换后的值，如：</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">34520</span>的二进制表示：
<span class="token number">10000110</span> <span class="token number">11011000</span>

将其高<span class="token number">8</span>位与低<span class="token number">8</span>位进行交换，得到一个新的二进制数：
<span class="token number">11011000</span> <span class="token number">10000110</span>
其十进制为<span class="token number">55430</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面移位操作我们可以知道，只要将无符号数 a&gt;&gt;8 即可得到其高 8 位移到低 8 位，高位补 0；将 a&lt;&lt;8 即可将 低 8 位移到高 8 位，低 8 位补 0，然后将 a&gt;&gt;8 和 a&lt;&lt;8 进行或操作既可求得交换后的结果。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">34520</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9),T={id:"_7-位操作进行二进制逆序",tabindex:"-1"},D={class:"header-anchor",href:"#_7-位操作进行二进制逆序"},z={href:"https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%80%86%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>将无符号数的二进制表示进行逆序，求取逆序后的结果，如</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>数<span class="token number">34520</span>的二进制表示：
<span class="token number">10000110</span> <span class="token number">11011000</span>

逆序后则为：
<span class="token number">00011011</span> <span class="token number">01100001</span>
它的十进制为<span class="token number">7009</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),I={href:"https://www.zhihu.com/search?q=%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D",target:"_blank",rel:"noopener noreferrer"},N=t(`<ul><li>第一步:以每 2 位为一组，组内进行高低位交换</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>交换前： <span class="token number">10</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token number">00</span>
交换后： <span class="token number">01</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">01</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">01</span> <span class="token number">00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二步：在上面的基础上，以每 4 位为 1 组，组内高低位进行交换</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>交换前： <span class="token number">0100</span> <span class="token number">1001</span> <span class="token number">1110</span> <span class="token number">0100</span>
交换后： <span class="token number">0001</span> <span class="token number">0110</span> <span class="token number">1011</span> <span class="token number">0001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三步：以每 8 位为一组，组内高低位进行交换</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>交换前： <span class="token number">00010110</span> <span class="token number">10110001</span>
交换后： <span class="token number">01100001</span> <span class="token number">00011011</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第四步：以每16位为一组，组内高低位进行交换</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>交换前： <span class="token number">0110000100011011</span>
交换后： <span class="token number">0001101101100001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的第一步，依次以 2 位作为一组，再进行组内高低位交换，这样处理起来比较繁琐，下面介绍另外一种方法进行处理。先分别取原数 10000110 11011000 的奇数位和偶数位，将空余位用 0 填充：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>原数：  <span class="token number">10000110</span> <span class="token number">11011000</span>
奇数位： <span class="token number">10000010</span> <span class="token number">10001000</span>
偶数位： <span class="token number">00000100</span> <span class="token number">01010000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再将奇数位右移一位，偶数位左移一位，此时将两个数据相或即可以达到奇偶位上数据交换的效果：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>原数：  <span class="token number">10000110</span> <span class="token number">11011000</span>
奇数位右移一位： <span class="token number">0</span> <span class="token number">10000010</span> <span class="token number">1000100</span>
偶数位左移一位：<span class="token number">0000100</span> <span class="token number">01010000</span> <span class="token number">0</span>
两数相或得到： <span class="token number">01001001</span> <span class="token number">11100100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法用位操作可以表示为：</p><ul><li>取a的奇数位并用 0 进行填充可以表示为：a &amp; 0xAAAA</li><li>取a的偶数为并用 0 进行填充可以表示为：a &amp; 0x5555 因此，上面的第一步可以表示为： a = ((a &amp; 0xAAAA) &gt;&gt; 1) | ((a &amp; 0x5555) &lt;&lt; 1) 同理，可以得到其第二、三和四步为： a = ((a &amp; 0xCCCC) &gt;&gt; 2) | ((a &amp; 0x3333) &lt;&lt; 2) a = ((a &amp; 0xF0F0) &gt;&gt; 4) | ((a &amp; 0x0F0F) &lt;&lt; 4) a = ((a &amp; 0xFF00) &gt;&gt; 8) | ((a &amp; 0x00FF) &lt;&lt; 8) 因此整个操作为：</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">34520</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0xAAAA</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0x5555</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0xCCCC</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0x3333</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0xF0F0</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0x0F0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0xFF00</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token number">0x00FF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-位操作统计二进制中-1-的个数" tabindex="-1"><a class="header-anchor" href="#_8-位操作统计二进制中-1-的个数"><span>8. 位操作统计二进制中 1 的个数</span></a></h3><p>统计二进制1的个数可以分别获取每个二进制位数，然后再统计其1的个数，此方法效率比较低。这里介绍另外一种高效的方法，同样以 34520 为例，我们计算其 a &amp;= (a-1)的结果：</p><ul><li>第一次：计算前：1000 0110 1101 1000 计算后：1000 0110 1101 0000</li><li>第二次：计算前：1000 0110 1101 0000 计算后：1000 0110 1100 0000</li><li>第二次：计算前：1000 0110 1100 0000 计算后：1000 0110 1000 0000 我们发现，没计算一次二进制中就少了一个 1，则我们可以通过下面方法去统计：</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>count <span class="token operator">=</span> <span class="token number">0</span>  
<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  
  a <span class="token operator">=</span> a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  count<span class="token operator">++</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function O(Z,V){const a=o("ExternalLinkIcon");return l(),c("div",null,[i,n("p",null,[s("计算机中的数在内存中都是以"),n("a",u,[s("二进制"),e(a)]),s("形式进行存储的，用位运算就是直接对整数在内存中的"),n("a",d,[s("二进制位"),e(a)]),s("进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。")]),k,n("ul",null,[m,b,n("li",null,[n("p",null,[s("^ "),n("a",v,[s("异或运算"),e(a)]),s("，两个位相同则为 0，不同则为 1，如 1 0 0 1 1 ^ 1 1 0 0 1 "),h,s(" 0 1 0 1 0")])]),g,_]),y,n("h3",f,[n("a",w,[n("span",null,[s("3. 位操作判断"),n("a",x,[s("奇偶数"),e(a)])])])]),E,n("h3",B,[n("a",A,[n("span",null,[s("5. 位操作求"),n("a",C,[s("绝对值"),e(a)])])])]),F,n("h3",T,[n("a",D,[n("span",null,[s("7. 位操作进行"),n("a",z,[s("二进制逆序"),e(a)])])])]),q,n("p",null,[s("在字"),n("a",I,[s("符串逆序"),e(a)]),s("过程中，可以从字符串的首尾开始，依次交换两端的数据。在二进制中使用位的高低位交换会更方便进行处理，这里我们分组进行多步处理。")]),N])}const S=p(r,[["render",O],["__file","bitOperation.html.vue"]]),j=JSON.parse('{"path":"/code/data-structure-and-algorithms/algorithms/bitOperation.html","title":"位运算","lang":"zh-CN","frontmatter":{"order":2,"title":"位运算","date":"2021-01-01T00:00:00.000Z","category":"数据结构与算法","timeline":true,"article":true,"description":"位运算 计算机中的数在内存中都是以二进制形式进行存储的，用位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。 位操作符 & 与运算 两个位都是 1 时，结果才为 1，否则为 0，如 1 0 0 1 1 & 1 1 0 0 1 --------------------------...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/data-structure-and-algorithms/algorithms/bitOperation.html"}],["meta",{"property":"og:title","content":"位运算"}],["meta",{"property":"og:description","content":"位运算 计算机中的数在内存中都是以二进制形式进行存储的，用位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。 位操作符 & 与运算 两个位都是 1 时，结果才为 1，否则为 0，如 1 0 0 1 1 & 1 1 0 0 1 --------------------------..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:42:11.000Z"}],["meta",{"property":"article:author","content":"Du"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:42:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"位运算\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-08T06:42:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Du\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"位操作符","slug":"位操作符","link":"#位操作符","children":[]},{"level":2,"title":"常见位运算问题","slug":"常见位运算问题","link":"#常见位运算问题","children":[{"level":3,"title":"1. 位操作实现乘除法","slug":"_1-位操作实现乘除法","link":"#_1-位操作实现乘除法","children":[]},{"level":3,"title":"2. 位操作交换两数","slug":"_2-位操作交换两数","link":"#_2-位操作交换两数","children":[]},{"level":3,"title":"3. 位操作判断奇偶数","slug":"_3-位操作判断奇偶数","link":"#_3-位操作判断奇偶数","children":[]},{"level":3,"title":"4. 位操作交换符号","slug":"_4-位操作交换符号","link":"#_4-位操作交换符号","children":[]},{"level":3,"title":"5. 位操作求绝对值","slug":"_5-位操作求绝对值","link":"#_5-位操作求绝对值","children":[]},{"level":3,"title":"6. 位操作进行高低位交换","slug":"_6-位操作进行高低位交换","link":"#_6-位操作进行高低位交换","children":[]},{"level":3,"title":"7. 位操作进行二进制逆序","slug":"_7-位操作进行二进制逆序","link":"#_7-位操作进行二进制逆序","children":[]},{"level":3,"title":"8. 位操作统计二进制中 1 的个数","slug":"_8-位操作统计二进制中-1-的个数","link":"#_8-位操作统计二进制中-1-的个数","children":[]}]}],"git":{"createdTime":1715140098000,"updatedTime":1715150531000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":6.62,"words":1985},"filePathRelative":"code/data-structure-and-algorithms/algorithms/bitOperation.md","localizedDate":"2021年1月1日","excerpt":"\\n<p>计算机中的数在内存中都是以<a href=\\"https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二进制</a>形式进行存储的，用位运算就是直接对整数在内存中的<a href=\\"https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A736472332%7D\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二进制位</a>进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。</p>","autoDesc":true}');export{S as comp,j as data};
