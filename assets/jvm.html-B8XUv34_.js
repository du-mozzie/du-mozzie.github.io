import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as p,b as t,d as a,e as s,h as e}from"./app-BhpC3I6z.js";const r={},c=e('<p>JVM（Java虚拟机）内存模型是Java平台规范的一部分，它定义了如何在JVM中管理内存，以及Java程序在执行过程中的内存使用规则。这一模型确保了跨平台的Java程序具有确定性的行为。JVM内存模型主要分为几个关键区域：堆、栈、程序计数器、本地方法栈、方法区</p><h2 id="jvm内存模型" tabindex="-1"><a class="header-anchor" href="#jvm内存模型"><span>JVM内存模型</span></a></h2><h3 id="jvm内存模型-1" tabindex="-1"><a class="header-anchor" href="#jvm内存模型-1"><span>JVM内存模型</span></a></h3><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1702296545251-14404f88-739e-46fd-8de4-7ee6cbe618a6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>线程共享</strong>：堆、方法区</p><p><strong>线程独享</strong>：虚拟机栈、程序计数器、本地方法栈</p><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h4><blockquote><p>对象分配策略</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1702296505567-b1b0c93b-bca4-48b4-b451-62e8f700f7fc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>对象进入Eden区，Minor GC存活的进入Survivor区，计数达到设置的MaxTenuringThreshold进入Old区</li><li>大对象直接进入Old区</li><li>动态年龄判断，在Survivor区，年龄从小到大累加大于该值的阈值，例 年龄1 + 年龄2 + 年龄3 + 年龄N size &gt; TargetSurvivorRatio值(默认是Survivor一半)， 则年龄N 跟 年龄N以上的对象进入老年区</li><li>年龄大于阈值，进入老年代，--X:MaxTenuringThreshold参数设置</li><li>Minor GC后，存活的对象空间大于survivor空间，直接进入老年代。</li></ul><p>以上对象均是分配到堆空间。</p><h4 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h4><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1715525875467-212eae86-8358-446a-81d8-3ec21e44a37f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h4><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1715525916410-043c5f5a-261d-4c5d-a552-b3ae027fbc9d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>jdk7及以前叫做永久代，jdk8开始，使用元空间取代了永久代。方法区和永久代并不等价，仅是对HotSpot虚拟机而言。《Java虚拟机规范》对如何实现方法区不做统一的要求，元空间使用的是本地内存。</p><p>jdk1.6及之前：有永久代(permanent generation)</p><p>jdk1.7：有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中</p><p>jdk1.8及以后：无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/202504271712636.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>字符串创建频率高，放在永久代不易回收</strong></p><h3 id="对象内存布局" tabindex="-1"><a class="header-anchor" href="#对象内存布局"><span>对象内存布局</span></a></h3><h4 id="创建对象的方法" tabindex="-1"><a class="header-anchor" href="#创建对象的方法"><span>创建对象的方法</span></a></h4><ol><li><p>new</p></li><li><p>反射</p><ul><li><p>根据类名：类名.class</p></li><li><p>根据对象：对象.getClass()</p></li><li><p>根据全限定类名：Class.forName(全限定类名)</p></li><li><p>根据对象：对象.newInstance()，JDK9废弃</p></li></ul></li><li><p>Constructor的getDeclaredConstructors()[0].newInstance(xx)，可以调用空参、带参的构造器，没有权限要求</p></li><li><p>clone()，浅拷贝</p></li><li><p>反序列化，从文件中、数据库中、网络中获取一个对象的二进制流，反序列化为内存中的对象</p></li><li><p>第三方库Objenesis，利用了asm字节码技术，动态生成Constructor</p></li></ol><h4 id="从执行步骤角度分析" tabindex="-1"><a class="header-anchor" href="#从执行步骤角度分析"><span>从执行步骤角度分析</span></a></h4><ol><li><p>判断对象对应的类是否加载、链接、初始化</p></li><li><p>为对象分配内存</p><ul><li><p>指针碰撞</p></li><li><p>空闲列表</p></li></ul></li><li><p>处理并发安全问题</p></li><li><p>初始化分配到的空间</p></li><li><p>设置对象的对象头</p></li><li><p>执行init方法进行初始化</p></li></ol><h4 id="类加载" tabindex="-1"><a class="header-anchor" href="#类加载"><span>类加载</span></a></h4><h5 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器：</span></a></h5><ul><li>BootStrapClassLoader 启动类加载器：加载JAVA_HOME/jre/lib目录下的库</li><li>ExtClassLoader 扩展类加载器：加载JAVA_HOME/jre/lib目录下的库</li><li>AppClassLoader 应用类加载器：加载classPath下的类</li><li>CustomizeClassLoader 自定义类加载器：自定义类加载规则</li></ul><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240801235029585.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>双亲委派机制：当需要加载一个类的时候，先委托上一级的加载器去进行加载，如果上一级的加载器加载成功，子加载器就不会在进行加载。</p><p><strong>为什么要使用双亲委派机制</strong>：</p><ol><li>通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</li><li>为了安全，保证核心类不被篡改</li></ol><h5 id="类加载流程" tabindex="-1"><a class="header-anchor" href="#类加载流程"><span>类加载流程：</span></a></h5><p>类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking)</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240802001210466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>加载：查找和导入class文件</li><li>验证：保证加载类的准确性</li><li>准备：为类变量分配内存并设置类变量初始值</li><li>解析：把类中的符号引用转换为直接引用</li><li>初始化：对类的静态变量，静态代码块执行初始化操作</li><li>使用：JVM开始从入口方法开始执行用户的程序代码</li><li>卸载：当用户程序代码执行完毕后，JVM便开始销毁创建的Class对象。</li></ul><h4 id="五种引用" tabindex="-1"><a class="header-anchor" href="#五种引用"><span>五种引用</span></a></h4><ol><li><p>强引用：不回收，程序中绝大部分都是强引用。只有所有GCRoots对象都不通过【强引l用】引I用该对象，该对象才能被垃圾回收。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804141959387.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>软引用：内存不足即回收，使用SoftReference类</p><p>作用：可以缓存一些经常使用到的数据，但是在垃圾回收时发现内存不足会被回收</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142035143.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>弱引用：发现即回收，使用WeakReference类</p><p>作用：在资源充足的时候缓存一些数据，当有垃圾回收(说明资源可能不足了)直接被回收掉</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142120496.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>虚引用：必须配合引用队列使用，被引用对象回收时，会将虚引l用入队，由ReferenceHandler线程调用虚引l用相关方法释放直接内存</p><p>作用：用于跟踪垃圾回收过程。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142448150.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>终结器引用：实现对象的finalize()方法，无需手动编码，其内部配合队列使用。在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象并调用，它的finalize()方法，第二次GC时才能回收被引用对象。</p></li></ol><h2 id="gc" tabindex="-1"><a class="header-anchor" href="#gc"><span>GC</span></a></h2><h3 id="垃圾判别算法" tabindex="-1"><a class="header-anchor" href="#垃圾判别算法"><span>垃圾判别算法</span></a></h3><p>判断一个对象是否是一个垃圾的算法</p><ol><li><p>引用计数算法：对于一个对象A，只要任何一个对象引用了A，那么的A的引用计数器则+1，当引用失效时，引用计数器-1。如果A的引用计数器=0了，则表示对象A不可能再被使用，可进行回收。</p><p>优点：实现简单，垃圾对象便于辨识；判断效率高，回收没有延迟性</p><p>缺点：</p><ul><li>需要单独的字段存储计数器，增加了内存开销</li><li>每次赋值都需要更新计数器，需要加减法操作，增加了时间开销</li><li>无法处理循环引用，致命缺陷，Java的垃圾回收器没有使用这个算法</li></ul></li><li><p>可达性分析算法(GC Root 根搜索算法)：以根对象集合为起始点，按照从上至下的方法搜索被根对象集合所连接的目标对象是否可达。使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接，搜索所走过的路径称为引用链。如果目标对象没有任何引用链相连，则是不可达标记为垃圾对象。只有能够被根集合直接或者间接连接的对象才是存活对象。</p><p>优点：实现简单，执行高效，有效的解决循环引用的问题，防止内存泄露。</p><p>GC Roots：</p><ul><li>虚拟机栈中引用的对象：各个线程被调用的方法中使用到的参数、局部变量等。</li><li>本地方法栈内JNI (通常说的本地方法)引用的对象</li><li>类静态属性引用的对象：比如: Java类的引用类型静态变量</li><li>方法区中常量引用的对象：字符串常量池(String Table)里的引用</li><li>所有被同步锁synchronized持有的对象</li><li>Java虚拟机内部的引用：基本数据类型对应的Class对象，一些常驻的异常对象( 如: NullPointerException、OutOfMemoryError），系统加载类</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li><li>除了这些固定的GCRoots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（Partial GC）</li></ul></li></ol><p><strong>可达性分析算法必须在一个能保证一致性的快照中进行，因为你的一个对象当前可能是可达的，但是下一秒可能不可达，所以判断必须是某一个快照时刻去判断，现在的虚拟机常用的是可达性分析算法。</strong></p><h3 id="垃圾清除算法" tabindex="-1"><a class="header-anchor" href="#垃圾清除算法"><span>垃圾清除算法</span></a></h3><p>当一个对象被判别为一个垃圾对象，如何清除的算法</p><ol><li><p>标记-清除算法(Mark-Sweep)</p><ul><li><strong>过程</strong>：首先标记所有需要回收的对象，然后统一回收</li><li><strong>优点</strong>：实现简单</li><li><strong>缺点</strong>：效率低，会产生大量内存碎片</li></ul></li><li><p>标记-整理算法(Mark-Compact)</p><ul><li><strong>过程</strong>：标记后将存活对象向一端移动，然后清理边界以外的内存</li><li><strong>优点</strong>：不会产生内存碎片</li><li><strong>缺点</strong>：移动对象需要更新引用，效率较低</li></ul></li><li><p>复制算法(Copying)</p><ul><li><strong>过程</strong>：将内存分为两块，只使用一块，当这块用完时，将存活对象复制到另一块</li><li><strong>优点</strong>：高效，不会产生内存碎片</li><li><strong>缺点</strong>：可用内存减少为原来的一半</li></ul></li><li><p>分代收集算法(Generational Collection)</p><ul><li><strong>过程</strong>：根据对象存活周期，将内存划分为不同的区域，根据各个区域特点使用不同算法</li><li><strong>优点</strong>：结合各种算法优点，提高回收效率</li><li><strong>缺点</strong>：实现复杂</li></ul></li></ol><h3 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器"><span>垃圾回收器</span></a></h3><h4 id="_1-serial-serial-old-回收器" tabindex="-1"><a class="header-anchor" href="#_1-serial-serial-old-回收器"><span>1. Serial/Serial Old 回收器</span></a></h4><ul><li><strong>执行过程</strong>: <ul><li>新生代回收时，Eden区满触发Minor GC</li><li>单线程执行，完全暂停应用线程(STW)</li><li>老年代回收时，单线程执行Full GC</li></ul></li><li><strong>优缺点</strong>: <ul><li><strong>优点</strong>: 简单高效，单线程无线程切换开销</li><li><strong>缺点</strong>: 停顿时间长，不适合多核处理器</li></ul></li></ul><h4 id="_2-parallel-parallel-old-回收器" tabindex="-1"><a class="header-anchor" href="#_2-parallel-parallel-old-回收器"><span>2. Parallel/Parallel Old 回收器</span></a></h4><ul><li><strong>执行过程</strong>: <ul><li>新生代回收时，多线程并行执行垃圾回收</li><li>应用线程仍然完全暂停(STW)</li><li>注重吞吐量，可通过参数控制最大停顿时间和吞吐量</li></ul></li><li><strong>优缺点</strong>: <ul><li><strong>优点</strong>: 充分利用多核CPU，提高吞吐量</li><li><strong>缺点</strong>: 仍有较长停顿时间，不适合需要低延迟的应用</li></ul></li></ul><p><strong>配置参数</strong></p><blockquote><p>-XX:MaxGCpauseMillis，设置垃圾收集器最大停顿时间(即STW的时间)，单位是毫秒</p></blockquote><blockquote><p>-XX:GCTimeRation，垃圾收集时间占总时间的比例( = 1 / (N + 1))，用于衡量的大小，取值范围(0,100)，默认99，垃圾回收时间不超过1%</p></blockquote><blockquote><p>-XX:+UseAdaptiveSizePolicy，设置Parallel Scavenge收集器具有自适应调节策略</p></blockquote><h4 id="_3-cms-回收器" tabindex="-1"><a class="header-anchor" href="#_3-cms-回收器"><span>3. CMS 回收器</span></a></h4><ul><li><strong>执行过程</strong>: <ol><li>初始标记(STW): 仅标记GC Roots能直接关联的对象</li><li>并发标记: 与用户线程并发执行，进行GC Roots追踪</li><li>重新标记(STW): 修正并发标记期间用户线程导致的变动</li><li>并发清除: 与用户线程并发执行，清除垃圾对象</li></ol></li><li><strong>优缺点</strong>: <ul><li><strong>优点</strong>: 并发收集，低停顿</li><li><strong>缺点</strong>: <ul><li>CPU资源敏感</li><li>无法处理浮动垃圾</li><li>会产生内存碎片</li></ul></li></ul></li></ul><h4 id="_4-g1-回收器" tabindex="-1"><a class="header-anchor" href="#_4-g1-回收器"><span>4. G1 回收器</span></a></h4><ul><li><p><strong>特点</strong>：</p><ul><li>应用于新生代和老年代，在JDK9之后默认使用G1</li><li>划分成多个区域，每个区域都可以充当eden，survivor，old，humongous，其中humongous专为大对象准备</li><li>采用复制算法</li><li>响应时间与吞吐量兼顾</li><li>分成三个阶段：新生代回收(stw)、并发标记(重新标记stw)、混合收集</li><li>如果并发失败（即回收速度赶不上创建新对象速度），会触发 FullGC</li></ul><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804100840750.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>执行过程</strong>:</p><ol><li>初始标记(STW): 标记GC Roots直接关联对象</li><li>并发标记: 与用户线程并发执行</li><li>最终标记(STW): 处理并发阶段遗留的标记</li><li>筛选回收(STW): 对各个Region的回收价值排序，选择回收收益最大的Region</li></ol></li><li><p><strong>优缺点</strong>:</p><ul><li><strong>优点</strong>: <ul><li>可预测的停顿时间模型</li><li>区域化分配与回收</li><li>空间整合，不会产生大量碎片</li></ul></li><li><strong>缺点</strong>: <ul><li>内存占用和额外执行负载比CMS高</li></ul></li></ul></li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ol><li><strong>分代假设驱动堆划分</strong></li></ol><p>传统垃圾回收器（如Serial、Parallel Scavenge、CMS）基于分代假设（Generational Hypothesis）设计：</p><ul><li><p><strong>年轻代</strong>：对象生命周期短（朝生夕死），适合<strong>复制算法</strong>（如Eden + Survivor区）。</p></li><li><p><strong>老年代</strong>：对象存活时间长，适合<strong>标记-清除</strong>或<strong>标记-整理</strong>算法。</p></li></ul><p>堆的分代划分（Eden/Survivor/老年代）直接服务于分代回收策略，不同代区使用不同的回收算法。</p><table><thead><tr><th style="text-align:left;"><strong>回收器</strong></th><th style="text-align:left;"><strong>算法</strong></th><th style="text-align:left;"><strong>堆结构</strong></th><th style="text-align:left;"><strong>分代模型</strong></th><th style="text-align:left;"><strong>并发/并行</strong></th><th style="text-align:left;"><strong>特点</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Serial</strong></td><td style="text-align:left;">- 年轻代：<strong>标记-复制</strong> <br>- 老年代：<strong>标记-整理</strong></td><td style="text-align:left;">固定分代： <br>年轻代（Eden + 2 Survivor） + 老年代</td><td style="text-align:left;">物理分代</td><td style="text-align:left;">单线程（STW）</td><td style="text-align:left;">简单高效，适用于客户端或小内存场景，单CPU环境下的Client模式</td></tr><tr><td style="text-align:left;"><strong>Parallel Scavenge</strong></td><td style="text-align:left;">- 年轻代：<strong>并行标记-复制</strong> <br>- 老年代：<strong>并行标记-整理</strong></td><td style="text-align:left;">固定分代： <br>年轻代（Eden + 2 Survivor） + 老年代</td><td style="text-align:left;">物理分代</td><td style="text-align:left;">多线程并行（STW）</td><td style="text-align:left;">吞吐量优先，适合后台计算密集型而不需要太多交互的任务</td></tr><tr><td style="text-align:left;"><strong>CMS</strong></td><td style="text-align:left;">- 年轻代：<strong>并行标记-复制</strong>（ParNew） <br>- 老年代：<strong>并发标记-清除</strong></td><td style="text-align:left;">固定分代： <br>年轻代（Eden + 2 Survivor） + 老年代</td><td style="text-align:left;">物理分代</td><td style="text-align:left;">并发标记（部分阶段并发）</td><td style="text-align:left;">低停顿老年代回收，但存在内存碎片和并发模式失败风险，集中在互联网站或B/S系统服务端上的Java应用</td></tr></tbody></table><ol start="2"><li><strong>非分代堆结构</strong></li></ol><p>现代垃圾回收器（如G1、ZGC、Shenandoah）采用<strong>区域化堆设计</strong>，打破了传统分代模型的物理界限：</p><ul><li><strong>G1（Garbage-First）</strong>：将堆划分为多个<strong>等大小Region</strong>（通常2MB~32MB），逻辑上仍分年轻代（Eden/Survivor Region）和老年代（Old Region），但物理上不固定。</li><li><strong>ZGC/Shenandoah</strong>：彻底抛弃分代概念，将堆视为<strong>连续的内存块</strong>，通过着色指针或读屏障实现并发标记-整理。</li></ul><table><thead><tr><th style="text-align:left;"><strong>回收器</strong></th><th style="text-align:left;"><strong>算法</strong></th><th style="text-align:left;"><strong>堆结构</strong></th><th style="text-align:left;"><strong>分代模型</strong></th><th style="text-align:left;"><strong>并发/并行</strong></th><th style="text-align:left;"><strong>特点</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>G1 (Garbage-First)</strong></td><td style="text-align:left;">- <strong>分Region标记-整理</strong> <br>- 并发标记 + 增量回收</td><td style="text-align:left;">动态分区： 堆划分为多个等大小Region（2MB~32MB），逻辑分代（Eden/Survivor/Old）</td><td style="text-align:left;">逻辑分代</td><td style="text-align:left;">并发标记 + 并行回收</td><td style="text-align:left;">平衡吞吐与延迟，可预测停顿时间，适合大堆内存，面向服务端应用，将来替换CMS</td></tr><tr><td style="text-align:left;"><strong>ZGC</strong></td><td style="text-align:left;">- <strong>并发标记-整理</strong> <br>- 基于染色指针（Colored Pointers）和读屏障</td><td style="text-align:left;">连续堆内存，无物理分代</td><td style="text-align:left;">无分代</td><td style="text-align:left;">全阶段并发</td><td style="text-align:left;">亚毫秒级停顿，适合超大堆（TB级），但需更高内存开销，适合大内存低延迟应用</td></tr><tr><td style="text-align:left;"><strong>Shenandoah</strong></td><td style="text-align:left;">- <strong>并发标记-整理</strong> <br>- 基于转发指针（Brooks Pointer）和读屏障</td><td style="text-align:left;">连续堆内存，无物理分代</td><td style="text-align:left;">无分代</td><td style="text-align:left;">全阶段并发</td><td style="text-align:left;">类似ZGC，但通过转发指针减少内存占用，适合中等规模堆。</td></tr></tbody></table><p>项目中如何选择垃圾回收器：</p><ol><li>根据机器情况判断，如果是单核机器，或者内存较小的机器，则选择Serial GC。</li><li>根据业务类型判断，看你的应用更在意的是吞吐量还是 STW 的时长。比如批处理任务的应用，更在意的就是吞吐量，而实时交易系统，更在意的就是 STW 的时长。</li><li>根据机器分配的堆内存大小进行判断，一把来说，我们认为至少达到4G 以上才可以用 G1、ZGC 等，通常要比如超过8G、16G 这样效果才更好。</li><li>根据 JDK 版本进行判断，不同的版本支持的垃圾收集器不一样。</li></ol><p>GC评估指标：</p><ol><li>吞吐量：程序的运行时间(程序的运行时间十内存回收的时间)</li><li>暂停时间(响应时间)：执行垃圾收集时，程序的工作线程被暂停的时间</li><li>垃圾收集开销：吞吐量的补数，垃圾收集器所占时间与总时间的比例。</li><li>收集频率：相对于应用程序的执行，收集操作发生的频率。</li><li>内存占用：Java堆区所占的内存大小。</li><li>快速：一个对象从诞生到被回收所经历的时间。</li></ol><p>可以参考以下的选择方式（但是，并不绝对，尤其是 ZGC 和Shenandoah GC 的选择，其实还是要慎重，毕竟他们的稳定性各方面还有待验证）：</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240917232425222.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>一次完整的GC流程大致如下，基于JDK1.8</strong></p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240917205336308.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2>',79),d={href:"https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html",target:"_blank",rel:"noopener noreferrer"},u=e('<h3 id="栈-1" tabindex="-1"><a class="header-anchor" href="#栈-1"><span>栈</span></a></h3><blockquote><p>-Xss：设置虚拟机栈大小，JDK5后默认1024k</p></blockquote><h3 id="堆-1" tabindex="-1"><a class="header-anchor" href="#堆-1"><span>堆</span></a></h3><blockquote><p>-Xms：设置堆空间初始大小</p></blockquote><blockquote><p>-Xmx：设置堆空间最大大小，超过该值会抛出OutOfMemoryError异常</p></blockquote><ul><li><strong>通常会将 -Xms 和 -Xmx 设置为一样的值，是为了让java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong></li><li><strong>heap默认最大值计算方式：如果物理内存小于192M，那么heap最大值为物理内存的一半。如果物理内存大于等于1G，那么heap的最大值为物理内存的1/4。</strong></li><li><strong>heap默认最小值计算方式：最少不得小于8M，如果物理内存大于等于1G，那么默认值为物理内存的1/64，即1024/64=16M。最小堆内存在jvm启动的时候就会被初始化。</strong></li></ul><blockquote><p>-XX:NewRatio=2，表示新生代占1，老年代占2，新生代站整个堆的1/3</p></blockquote><blockquote><p>-Xmn：设置新生代最大内存大小</p></blockquote><p><strong>一般上面这两个参数都不会去修改</strong></p><blockquote><p>-XX:SurvivorRatio=8，调整Eden空间和另外两个Survivor空间的比例，默认是8:1:1</p></blockquote><blockquote><p>-XX:+UseAdaptiveSizePolicy</p></blockquote><p><strong>要显示设置jvm参数不然是6:1:1</strong></p><blockquote><p>-XX:MaxTenuringThreshold=&lt;N&gt;，年轻代转换到老年代阈值，默认15</p></blockquote><blockquote><p>-XX:TargetSurvivorRatio，动态年龄判断，默认Survior区一半</p></blockquote><p>Survivor区年龄从小到大累加大于该值的阈值，例 年龄1 + 年龄2 + 年龄3 + 年龄N size &gt; TargetSurvivorRatio， 则年龄N 跟 年龄N以上的对象进入老年区</p><blockquote><p>-XX:HandlePromotionFailure，是否允许担保失败</p></blockquote><p>在MinorGC之前，检查老年代最大可用的连续空间是否大于新生代所以对象的总空间</p><ul><li>如果大于，则此次MinorGC是安全的</li><li>如果小于，则虚拟机会查看-XX:HandlePromotionFailure设置是否允许担保失败，如果允许会检查老年代的最大可用的联系空间是否大于历次晋升到老年代的对象的平均大小，如果大于，那么会先进行MinorGC，但这次MinorGC仍然是有风险，失败后会发起一次MajorGC(FullGC)</li><li>如果小于或者HandlePromotionFailure=false，则改为直接进行一次MajorGC（FullGC）。</li></ul><p>在jdk1.6 update 24之后-XX:-HandlePromotionFailure 不起作用了，只要老年代的连续空间大于新生代对象的总大小或者历次晋升到老年代的对象的平均大小就进行MinorGC，否则FullGC</p><blockquote><p>-XX:+/-UseTLAB 设置是否开启TLAB空间</p></blockquote><blockquote><p>-XX:TLABWasteTargetPercent 设置TLAB空间所占用Eden空间的百分比大小</p></blockquote><p>TLAB：线程专用的内存分配区域，可以解决内存分配冲突问题，线程分配优先考虑Eden区中的TLAB区</p><h3 id="方法区-1" tabindex="-1"><a class="header-anchor" href="#方法区-1"><span>方法区</span></a></h3><blockquote><p>-XX:+TraceClassLoading，加载类信息打印</p></blockquote><blockquote><p>-XX:+TraceClassUnloading，卸载类信息打印</p></blockquote><p><strong>jdk6/7</strong></p><blockquote><p>-XX:PermSize=10m，永久代初始空间</p></blockquote><blockquote><p>-XX:MaxPermSize=10m，永久代最大空间</p></blockquote><p><strong>jdk8</strong></p><blockquote><p>-XX:MetaspaceSize=10m，元空间初始空间</p></blockquote><blockquote><p>-XX:MaxMetaspaceSize=10m，元空间最大空间</p></blockquote><h3 id="gc-1" tabindex="-1"><a class="header-anchor" href="#gc-1"><span>GC</span></a></h3><blockquote><p>-XX:+PrintGCDetails，打印GC详细信息</p></blockquote><blockquote><p>-Xloggc:./logs/gc.log，配置GC日志输出文件</p></blockquote><blockquote><p>-XX:HeapDumpPath=xxx/xxx.hprof，参数表示当JVM发生OOM时，自动生成DUMP文件</p></blockquote><blockquote><p>-XX:-UseGCOverheadLimit，禁用检查（GC overhead limit exceeded，这个GC错误是因为回收堆内存效率低，98%时间都在做GC却回收不到了2%的堆内存）</p></blockquote><p><strong>Parallel old GC</strong></p><blockquote><p>-XX:MaxGCpauseMillis，设置垃圾收集器最大停顿时间(即STW的时间)，单位是毫秒</p></blockquote><blockquote><p>-XX:GCTimeRation，垃圾收集时间占总时间的比例( = 1 / (N + 1))，用于衡量的大小，取值范围(0,100)，默认99，垃圾回收时间不超过1%</p></blockquote><blockquote><p>-XX:+UseAdaptiveSizePolicy，设置Parallel Scavenge收集器具有自适应调节策略</p></blockquote><blockquote><p>-XX:ParallelGCThreads=8，限制线程数量，默认开启和CPU相同的线程数</p></blockquote><p><strong>ParNew</strong></p><blockquote><p>-XX:+UseParNewGC，指定使用ParNew收集器</p></blockquote><p><strong>G1</strong></p><blockquote><p>-XX：+UseG1GC 手动指定使用G1收集器执行内存回收任务。</p></blockquote><blockquote><p>-XX:G1HeapRegionSize 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</p></blockquote><blockquote><p>-XX:MaxGCPauseMillis 设置期望达到的最大GC停顿时间指标(JVM会尽力实现，但不保证达到)。默认值是200ms</p></blockquote><blockquote><p>-XX:ParallelGCThread 设置STW时GC线程数的值。最多设置为8</p></blockquote><blockquote><p>-XX:ConcGCThreads 设置并发标记的线程数。将n设置为并行垃圾回收线程数(ParallelGCThreads)的1/4左右。</p></blockquote><blockquote><p>-XX:InitiatingHeapOccupancyPercent 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</p></blockquote><p>一些GC日志打印</p><blockquote><p>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintCommandLineFlags -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintReferenceGC</p></blockquote><h3 id="查看运行时-jvm-参数" tabindex="-1"><a class="header-anchor" href="#查看运行时-jvm-参数"><span>查看运行时 JVM 参数</span></a></h3><blockquote><p>-XX:+PrintFlagsInitial 查看初始值</p></blockquote><blockquote><p>-XX:+PrintFlagsFinal：查看最终的值一般都有一个默认值，可以通过命令行等配置方式覆盖掉这个默认值，这里查看的则是这个最终的值</p></blockquote><blockquote><p>-XX:+UnlockExperimentaIVMOptions：解锁实验参数JVM 中有一部分参数是无法直接赋值的，需要加该参数，解锁实验参数，才能配置</p></blockquote><blockquote><p>-XX:UnlockDiagnosticVMOpeions：解锁诊断参数</p></blockquote><blockquote><p>-XX:+PrintCommandLineFlags：打印命令行参数，查看命令行相关参数（包含使用的垃圾收集器）</p></blockquote><h3 id="jit编译器" tabindex="-1"><a class="header-anchor" href="#jit编译器"><span>JIT编译器</span></a></h3><blockquote><p>-XX:+DoEscapeAnalysis，jdk 6u23开始已经默认开始逃逸分析</p></blockquote><blockquote><p>-XX:+EliminateAllocations，开启标量替换，需要逃逸分析先开启</p></blockquote><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><table><thead><tr><th>参数作用</th><th>写法</th><th>可选值</th><th>备注</th></tr></thead><tbody><tr><td>启用G1垃圾收集器</td><td>-XX:+UseG1GC</td><td>启用: -XX:-UseG1GC</td><td></td></tr><tr><td>启用其他的垃圾收集器</td><td>-XX:+UseSerialGC<br>-XX:+UseParallelGC<br>-XX:+UseConcMarkSweepGC<br>-XX:+UseZGC<br>-XX:+UseShenandoahGC<br></td><td></td><td>其中部分垃圾收集器是可以组合使用的</td></tr><tr><td>设置最大垃圾收集暂停的时间目标（毫秒）</td><td>-XX:MaxGCPauseMillis=&lt;N&gt;</td><td>任何正整数，默认值200</td><td>会影响每次收集的范围</td></tr><tr><td>设置堆的初始大小</td><td>-Xms&lt;size&gt;</td><td>任何合适的大小，例如4g、512m</td><td></td></tr><tr><td>设置堆的最大值</td><td>-Xmx&lt;size&gt;</td><td>任何合适的大小，例如4g、512m</td><td></td></tr><tr><td>设置垃圾收集的最小堆大小</td><td>-Xmn&lt;size&gt;</td><td>任何合适的大小，例如4g、512m</td><td>设置较小的堆大小可以节省内存空间</td></tr><tr><td>设置栈大小</td><td>-Xss&lt;size&gt;</td><td>任何合适的大小，例如512k</td><td></td></tr><tr><td>设置单个Region的大小</td><td>-XX:G1HeapRegionSize=&lt;size&gt;</td><td>1MB到32MB，必须是2的幂</td><td>较大的区域大小可能会减少收集频率，但增加了每次收集的开销</td></tr><tr><td>设置年轻代初始大小占整个堆大小的百分比</td><td>-XX:NewSizePercent=&lt;percent&gt;</td><td>0到100，默认值5</td><td></td></tr><tr><td>设置年轻代最大大小占整个堆大小的百分比</td><td>-XX:MaxNewSizePercent=&lt;percent&gt;</td><td>0到100，默认值60</td><td>较大的年轻代大小可能会减少年轻代的频繁回收</td></tr><tr><td>设置最大晋升阈值</td><td>-XX:MaxTenuringThreshold</td><td>任何正整数</td><td>间值越大，则Survivor存放的对象越多</td></tr><tr><td>设置初始老年代并未被使用的老年代占比</td><td>-XX:InitiatingHeapOccupancyPercent=&lt;percent&gt;</td><td>0到100，默认值45</td><td>较低的阈值可能导致频繁的老年代收集</td></tr><tr><td>设置触发Cset的G1混合垃圾收集的老年代占比阈值</td><td>-XX:G1MixedGCLiveThresholdPercent=&lt;percent&gt;</td><td>0到100</td><td>不同版本默认值不同，Region中有对象大于这个值会被放入Cset</td></tr><tr><td>设置G1回收时的预留空间的百分比</td><td>-XX:G1ReservePercent</td><td>0到100</td><td>较大的预留内存可能会减少浮动和暂停时间</td></tr><tr><td>设置触发一次（混合）回收所需的存活对象分区的最小数数</td><td>-XX:G1MixedGCLiveThresholdPercent=&lt;percent&gt;</td><td>任何正整数，默认8</td><td></td></tr><tr><td>设置垃圾收集时使用的最大并行线程数</td><td>-XX:ConcGCThreads=&lt;N&gt;</td><td>任何正整数</td><td></td></tr><tr><td>设置混合垃圾收集时的最大并行线程数</td><td>-XX:ParallelGCThreads=&lt;N&gt;</td><td>任何正整数</td><td></td></tr><tr><td>设置16进制的打印线程时间的概率</td><td>-XX:G1ConfidencePercent=&lt;percent&gt;</td><td>任何正整数</td><td></td></tr><tr><td>设置最大垃圾收集时间（毫秒）</td><td>-XX:MaxGCPauseMillis=&lt;N&gt;</td><td>任何正整数</td><td></td></tr><tr><td>启用类卸载</td><td>-XX:+ClassUnloadingWithConcurrentMark</td><td>启用: -XX:-ClassUnloadingWithConcurrentMark</td><td></td></tr><tr><td>禁用类卸载</td><td>-XX:-ClassUnloadingWithConcurrentMark</td><td></td><td></td></tr><tr><td>设置可进行垃圾收集的堆的最大百分比</td><td>-XX:G1HeapWastePercent=&lt;percent&gt;</td><td></td><td></td></tr><tr><td>启用字符串去重</td><td>-XX:+UseStringDeduplication</td><td></td><td></td></tr><tr><td>禁用字符串去重</td><td>-XX:-UseStringDeduplication</td><td></td><td></td></tr><tr><td>启用详细的垃圾回收日志</td><td>-XX:+PrintGCDetails</td><td></td><td></td></tr><tr><td>启用带时间戳的垃圾回收日志</td><td>-XX:+PrintGCDateStamps</td><td></td><td></td></tr><tr><td>启用带时间戳的垃圾回收日志</td><td>-XX:+PrintGCTimeStamps</td><td></td><td></td></tr><tr><td>输出GC日志到文件</td><td>-Xloggc:&lt;file&gt;</td><td>例如: -Xloggc:/path/to/gc.log</td><td></td></tr><tr><td>打印垃圾回收过程中使用的适应性信息</td><td>-XX:+PrintAdaptiveSizePolicy</td><td></td><td></td></tr><tr><td>打印详细的G1收集器统计信息</td><td>-XX:+UnlockDiagnosticVMOptions</td><td></td><td></td></tr><tr><td>打印详细的G1收集器统计信息</td><td>-XX:+G1PrintRegionLivenessInfo</td><td></td><td></td></tr><tr><td>设置年轻代（包括Eden和Survivor区）和老年代的比例</td><td>-XX:NewRatio</td><td>默认值为2</td><td></td></tr><tr><td>设置Eden区和Survivor区的比例</td><td>-XX:SurvivorRatio</td><td>默认值为8，即Eden区是每个Survivor区的8倍</td><td></td></tr><tr><td>设置在垃圾回收之后希望幸存的对象在Survivor区中所占的百分比</td><td>-XX:TargetSurvivorRatio</td><td>默认值为50</td><td></td></tr><tr><td>解锁实验性的JVM选项</td><td>-XX:+UnlockExperimentalVMOptions</td><td>某些选项需要开启这个条件</td><td></td></tr></tbody></table><h2 id="调优" tabindex="-1"><a class="header-anchor" href="#调优"><span>调优</span></a></h2><p>现在JVM调优标准：在最大吞吐量优先的情况下，降低停顿时间</p><p><strong>案例：</strong></p>',66),g={href:"https://zq99299.github.io/note-book2/monitor-tuning/#%E5%BF%85%E5%A4%87%E6%8E%A8%E8%8D%90",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/7270152013341425698",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.ifb.me/blog/backend/arthasjvm-ming-ling",target:"_blank",rel:"noopener noreferrer"},k=t("p",null,[t("strong",null,"调优步骤")],-1),b=e("<li><p>熟悉业务场景</p></li><li><p>性能监控</p><p>可能的问题：</p><ul><li><p>GC 频繁</p></li><li><p>Cpu load过高</p></li><li><p>OOM</p></li><li><p>内存泄漏</p></li><li><p>死锁</p></li><li><p>程序响应时间较长（Full GC频繁）</p></li></ul></li>",2),v=t("p",null,"性能分析",-1),f={href:"https://github.com/chewiebug/GCViewer",target:"_blank",rel:"noopener noreferrer"},G={href:"https://gceasy.io/",target:"_blank",rel:"noopener noreferrer"},X=t("li",null,[t("p",null,"命令行工具，jstack，jmap，jinfo等")],-1),C=t("li",null,[t("p",null,[a("dump出堆文件，使用内存分析工具("),t("strong",null,"eclipse MAT、jconsole、JVisualVM、jprofile等"),a(")分析文件")])],-1),j=t("li",null,[t("p",null,"使用阿里Arthas，jconsole，JVisualVM来实时查看JVM状态")],-1),_=t("li",null,[t("p",null,"jstack查看堆栈信息")],-1),x=e("<li><p>性能调优</p><ul><li><p>适当增加内存，根据业务背景选择垃圾回收器</p></li><li><p>优化代码，控制内存使用</p></li><li><p>增加机器，分散节点压力</p><ul><li>合理设置线程池线程数量</li></ul></li><li><p>使用中间件提高程序效率，比如缓存，消息队列等</p></li><li><p>其他......</p></li></ul></li>",1),z=e(`<p><strong>GC相关的调优都是根据业务大致分析出来的初始配置，所以我们一定是需要不断地调优的，那么必要的日志相关参数就要添加。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">100</span>：最大 GC 暂停时间为 <span class="token number">100</span> 毫秒，可以根据实际情况调整；
-XX:+HeapDumpOnOutOfMemoryError：当出现内存溢出时，自动生成堆内存快照文件；
<span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span>/path/to/heap/dump/file.hprof：堆内存快照文件的存储路径；
-XX:+PrintGC：输出 GC 信息；
-XX:+PrintGCDateStamps：输出 GC 发生时间；
-XX:+PrintGCTimeStamps：输出 GC 发生时 JVM 的运行时间；
-XX:+PrintGCDetails：输出 GC 的详细信息；
-Xlog:gc*:file<span class="token operator">=</span>/path/to/gc.log:time,uptime:filecount<span class="token operator">=</span><span class="token number">10</span>,filesize<span class="token operator">=</span>100M：将 GC 日志输出到指定文件中，可以根据需要调整日志文件路径、数量和大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化案例" tabindex="-1"><a class="header-anchor" href="#优化案例"><span>优化案例</span></a></h3><p>4C8G服务器，各项指标，什么范围算是正常（经供参考）</p><table><thead><tr><th></th><th>CPU利用率（单核）</th><th>Load</th><th>磁盘利用率</th><th>内存利用率</th><th>堆内存占用率</th><th>YGC次数</th><th>YGC时长</th><th>FGC次数</th><th>FGC时长</th></tr></thead><tbody><tr><td>正常范围</td><td>&lt;70%</td><td>&lt;2</td><td>80%以下</td><td>&lt;80%</td><td>&lt;80%</td><td>每分钟&lt;1次</td><td>&lt;50ms</td><td>&lt;1次/周</td><td>&lt;1s</td></tr><tr><td>需要关注范围</td><td>70%-90%</td><td>&gt;3</td><td>&gt;80%</td><td>&gt;=80%</td><td>&gt;=80%</td><td>每分钟&gt;1次</td><td>&gt;200ms</td><td>1次/天</td><td>&gt;2s</td></tr><tr><td>不可接受范围</td><td>&gt;=100%</td><td>&gt;4</td><td>&gt;=100%</td><td>&gt;100%</td><td>&gt;100%</td><td>10次/分钟</td><td>1s</td><td>1次/小时</td><td>&gt;=5s</td></tr></tbody></table><h4 id="_1-合理配置堆内存" tabindex="-1"><a class="header-anchor" href="#_1-合理配置堆内存"><span>1.合理配置堆内存</span></a></h4><p>依据的原则是根据Java Performance里面的推荐公式来进行设置。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804205727545.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Java整个堆大小设置，Xmx 和 Xms设置为老年代存活对象的3-4倍，即FullGC之后的老年代内存占用的3-4倍。</li><li>方法区（永久代 PermSize和MaxPermSize 或 元空间 MetaspaceSize 和 MaxMetaspaceSize）设置为老年代存活对象的1.2-1.5倍。</li><li>年轻代Xmn的设置为老年代存活对象的1-1.5倍。</li><li>老年代的内存大小设置为老年代存活对象的2-3倍。</li></ul><p>老年代存活对象计算方式：</p><ol><li><p>查看日志</p></li><li><p>强制触发FullGC</p><ul><li><p>jmap -dump:live,format=b,file=heap.bin &lt;pid&gt; 将当前的存活对象dump到文件，此时会触发FullGC</p></li><li><p>jmap -histo:live pid 打印每个class的实例数目,内存占用,类全名信息.live子参数加上后,只统计活的对象数量. 此时会触发FullGC</p></li><li><p>在性能测试环境，可以通过Java监控工具来触发FullGC，比如使用VisualVM和JConsole，VisualVM集成了JConsole，VisualVM或者JConsole上面有一个触发GC的按钮。</p></li></ul></li></ol><p>调整堆大小提高服务的吞吐量，堆空间设置多少合适？</p><ul><li>最大大小的默认值是物理内存的1/4，初始大小是物理内存的1/64</li><li>堆太小，可能会频繁的导致年轻代和老年代的垃圾回收，会产生stw，暂停用户线程</li><li>堆内存大肯定是好的，存在风险，假如发生了full gc,它会扫描整个堆空间，暂停用户线程的时间长</li></ul><h4 id="_2-jit编译器优化" tabindex="-1"><a class="header-anchor" href="#_2-jit编译器优化"><span>2.JIT编译器优化</span></a></h4><ol><li><p>逃逸分析：如果一个引用的对象的使用是否只会在一个方法中，如果在其他方法还会使用，说明该对象发生逃逸；如果一个对象没有发生逃逸（作用域只在一个方法中），JIT编译器根据逃逸分析的结构，可能将该对象优化成<strong>栈上分配</strong>，分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p></li><li><p>同步消除：</p><p>编译前代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object这个对象不会发生逃逸</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>由于object对象不会发生逃逸，所有经过JIT编译后，会消除同步代码块</p><ol start="3"><li><p>标量替换</p><p>标量替换前</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span>（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）<span class="token punctuation">;</span> <span class="token comment">// point这个对象不会发生逃逸</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;point.x=&quot;</span><span class="token operator">+</span>point<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">&quot;; point.y=&quot;</span><span class="token operator">+</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标量替换后</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;point.x=&quot;</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">&quot;; point.y=&quot;</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>Point这个聚合量经过逃逸分析后，发现它并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</p><p>标量替换为栈上分配提供了很好的基础。</p><p><strong>结论：Java中的逃逸分析，其实优化的点就在于对栈上分配的对象进行标量替换。</strong></p><h4 id="_3-内存溢出排查方案" tabindex="-1"><a class="header-anchor" href="#_3-内存溢出排查方案"><span>3.内存溢出排查方案</span></a></h4><ol><li><p>获取堆内存快照dump（dump文件是进程的内存镜像。可以把程序的执行状态通过调试器保存到dump文件中）</p><ul><li><p>使用jmap命令获取运行中程序的dump文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>heap.hprof pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用vm参数获取dump文件</p><p>有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/home/app/dumps/heapdump.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>VisualVM 去分析dump文件</p></li><li><p>通过查看堆信息的情况，定位内存溢出问题</p></li></ol><blockquote><p>如果定位不到问题，可以在记录一下GC日志</p></blockquote><ol><li><strong>输出 GC 日志</strong></li></ol><p>为了监控 GC 活动，可以通过以下参数输出 GC 日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+PrintGCDetails</span>
<span class="token parameter variable">-XX:+PrintGCDateStamps</span>
<span class="token parameter variable">-XX:+PrintTenuringDistribution</span>
-Xloggc:/path/to/gc.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-XX:+PrintGCDetails：输出详细的 GC 日志信息。</li><li>-XX:+PrintGCDateStamps：在 GC 日志中附加时间戳。</li><li>-XX:+PrintTenuringDistribution：输出对象晋升年龄分布信息。</li><li>-Xloggc：指定 GC 日志文件的存放路径。</li></ul><ol start="2"><li><strong>配置 GC 日志滚动</strong></li></ol><p>​ 为了避免 GC 日志过大，你可以配置日志滚动：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+UseGCLogFileRotation</span>
<span class="token parameter variable">-XX:NumberOfGCLogFiles</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token parameter variable">-XX:GCLogFileSize</span><span class="token operator">=</span>100M
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-XX:+UseGCLogFileRotation：启用 GC 日志滚动。</li><li>-XX:NumberOfGCLogFiles=10：设置保留的日志文件个数。</li><li>-XX:GCLogFileSize=100M：设置单个 GC 日志文件的大小。</li></ul><ol start="3"><li><strong>配置崩溃日志</strong></li></ol><p>如果 JVM 崩溃了，你可以启用错误日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:ErrorFile</span><span class="token operator">=</span>/path/to/hs_err_pid%p.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-XX:ErrorFile：指定 JVM 崩溃日志的保存路径，%p 表示进程 ID。</li></ul><h4 id="_4-cpu占用率很高的排查方案" tabindex="-1"><a class="header-anchor" href="#_4-cpu占用率很高的排查方案"><span>4.CPU占用率很高的排查方案</span></a></h4><ol><li><strong>ps aux | grep java</strong> 查看到当前java进程使用cpu、内存、磁盘的情况获取使用量异常的进程</li><li><strong>top -Hp 线程pid</strong> 实时查看进程的所有线程运行信息，找到异常的线程id</li><li>使用linux 命令 <strong>printf &quot;%x\\n&quot; 线程id</strong>，把线程id变为16进制</li><li><strong>jstack 进程的pid | grep 线程id(16进制)</strong> 得到相关进程的代码</li></ol><h4 id="_5-频繁-gc" tabindex="-1"><a class="header-anchor" href="#_5-频繁-gc"><span>5.频繁 GC</span></a></h4><ol><li>如果经常性的发生提前晋升情况，需要调整新生代大小和Survivor 区大小，或者调整 SurvivorRadio 比例</li><li>调整整个新生代比例，例如 -xmn=2g调整到 -xmn=6g，gc情况会大大改善</li><li>提前晋升会增加 younggc 耗时，因为跨代拷贝是很耗时的。</li><li>注意 Survivor 区幸存对象大小是否过大，这也是影响 younggc 耗时的因素。</li></ol><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h3>`,40),y={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/toc.html",target:"_blank",rel:"noopener noreferrer"},M={id:"jps-虚拟机进程状况",tabindex:"-1"},P={class:"header-anchor",href:"#jps-虚拟机进程状况"},S={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jps.html#CHDCGECD",target:"_blank",rel:"noopener noreferrer"},w=t("blockquote",null,[t("p",null,"jps，查看正在运行的Java进程")],-1),q=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1704206996779-df0c9c8d-8e4d-4a82-aa36-a21a3e369ef0.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),J={id:"jstat-收集虚拟机运行数据",tabindex:"-1"},T={class:"header-anchor",href:"#jstat-收集虚拟机运行数据"},V={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jstat.html#BEHHGFAE",target:"_blank",rel:"noopener noreferrer"},E=e('<blockquote><p>jstat -gc 进程号 打印周期(ms) 打印次数，查看JVM统计信息</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372236245-d42c4444-ba3e-4bc8-a289-b5a2e355e3aa.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>指标</th><th>描述</th><th>单位</th></tr></thead><tbody><tr><td>S0C</td><td>S0 区的大小 (Young Generation 中的 Survivor Space 0)</td><td>KB</td></tr><tr><td>S1C</td><td>S1 区的大小 (Young Generation 中的 Survivor Space 1)</td><td>KB</td></tr><tr><td>S0U</td><td>S0 区已用空间 (Young Generation 中的 Survivor Space 0 已用空间)</td><td>KB</td></tr><tr><td>S1U</td><td>S1 区已用空间 (Young Generation 中的 Survivor Space 1 已用空间)</td><td>KB</td></tr><tr><td>EC</td><td>Eden 区的大小 (Young Generation 中的 Eden Space)</td><td>KB</td></tr><tr><td>EU</td><td>Eden 区已用空间 (Young Generation 中的 Eden Space 已用空间)</td><td>KB</td></tr><tr><td>OC</td><td>Old 区的大小 (Old Generation 中的空间)</td><td>KB</td></tr><tr><td>OU</td><td>Old 区已用空间 (Old Generation 中的已用空间)</td><td>KB</td></tr><tr><td>MC</td><td>Metaspace 区的大小 (Metaspace 区的空间大小)</td><td>KB</td></tr><tr><td>MU</td><td>Metaspace 区已用空间 (Metaspace 区的已用空间)</td><td>KB</td></tr><tr><td>CCSC</td><td>Compressed Class Space 的大小</td><td>KB</td></tr><tr><td>CCSU</td><td>Compressed Class Space 的已用空间</td><td>KB</td></tr><tr><td>YGC</td><td>Young GC (年轻代垃圾回收) 的次数</td><td>次</td></tr><tr><td>YGCT</td><td>执行 Young GC 所用的时间</td><td>秒</td></tr><tr><td>FGC</td><td>Full GC (完整垃圾回收) 的次数</td><td>次</td></tr><tr><td>FGCT</td><td>执行 Full GC 所用的时间</td><td>秒</td></tr><tr><td>GCT</td><td>总的垃圾回收时间</td><td>秒</td></tr></tbody></table>',3),R={id:"jinfo-java配置信息工具",tabindex:"-1"},D={class:"header-anchor",href:"#jinfo-java配置信息工具"},O={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jinfo.html#BCGEBFDD",target:"_blank",rel:"noopener noreferrer"},B=t("blockquote",null,[t("p",null,"jinfo -flag 相关垃圾回收器参数 进程ID，实时查看和修改JVM配置参数（+表示在使用，-未使用）")],-1),F=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1704207097037-e17da0c3-19d8-44ac-92d5-9bd79029650a.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),A={id:"jmap-内存映射工具",tabindex:"-1"},U={class:"header-anchor",href:"#jmap-内存映射工具"},N={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jmap.html#CEGCECJB",target:"_blank",rel:"noopener noreferrer"},H=e('<blockquote><p>jmap -dump:live,format=b,file=heapdump.hprof &lt;pid&gt;，生成堆转储文件，包含 JVM 内存中的所有对象及其详细信息（信息最完整，通常配合 Eclipse MAT 或 VisualVM 进行分析）</p></blockquote><blockquote><p>jmap -histo:live &lt;pid&gt;，JVM 进程的内存使用情况，活跃的对象</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372377866-0cb243ba-a322-4c3b-99a6-cd5b664984cf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>jmap -heap 进程ID ，打印内存信息</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372330181-201d48b5-7e83-42f6-ac6d-a490c5c8b0a2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>jmap -histo &lt;pid&gt; | head -n 10 实时查看占用前十的对象，包括被回收的对象</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240701110942786.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),I={id:"jhat-堆转储快照分析工具",tabindex:"-1"},L={class:"header-anchor",href:"#jhat-堆转储快照分析工具"},W={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jhat.html#CIHHJAGE",target:"_blank",rel:"noopener noreferrer"},K=e(`<p>jhat（JVM Heap Analysis Tool），与jmap配合使用，用于分析jmap生成的堆转储快照。</p><p>jhat内置了一个小型的http/web服务器，可以把堆转储快照分析的结果，展示在浏览器中查看。不过用途不大，基本大家都会使用其他第三方工具。</p><p><strong>命令格式</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>jhat [-stack &lt;bool&gt;] [-refs &lt;bool&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;int&gt;] [-version] [-h|-help] &lt;file&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>命令使用</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">E</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\myself\\interview<span class="token operator">&gt;</span>jhat <span class="token operator">-</span>port <span class="token number">8090</span> <span class="token class-name">E</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\myself\\interview\\interview<span class="token operator">-</span><span class="token number">26</span>\\heap<span class="token punctuation">.</span>bin
<span class="token class-name">Reading</span> from <span class="token class-name">E</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\myself\\interview\\interview<span class="token operator">-</span><span class="token number">26</span>\\heap<span class="token punctuation">.</span>bin<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Dump</span> file created <span class="token class-name">Wed</span> <span class="token class-name">Jan</span> <span class="token number">13</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">47</span> <span class="token constant">CST</span> <span class="token number">2021</span>
<span class="token class-name">Snapshot</span> read<span class="token punctuation">,</span> resolving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Resolving</span> <span class="token number">246455</span> objects<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Chasing</span> references<span class="token punctuation">,</span> expect <span class="token number">49</span> dots<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Eliminating</span> duplicate references<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Snapshot</span> <span class="token class-name"><span class="token namespace">resolved<span class="token punctuation">.</span></span>
Started</span> <span class="token constant">HTTP</span> server on port <span class="token number">8090</span>
<span class="token class-name">Server</span> is ready<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>http://localhost:8090/</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20241105201150848.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,8),Z={id:"jstack-java堆栈跟踪工具",tabindex:"-1"},Y={class:"header-anchor",href:"#jstack-java堆栈跟踪工具"},Q={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jstack.html#BABGJDIF",target:"_blank",rel:"noopener noreferrer"},$=t("blockquote",null,[t("p",null,"jstack 进程ID，打印JVM中线程快照")],-1),tt=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372426504-0d317319-6105-44e9-8937-3c55fb075b3d.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),at={id:"jcmd-虚拟机诊断命令",tabindex:"-1"},nt={class:"header-anchor",href:"#jcmd-虚拟机诊断命令"},st={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jcmd.html#CIHEEDIB",target:"_blank",rel:"noopener noreferrer"},et=t("p",null,"多功能命令行",-1),lt=t("figure",null,[t("img",{src:"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372447216-f8284e21-6894-4d29-afa1-dbb91b3ece46.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),it={id:"jstatd-远程主机信息收集",tabindex:"-1"},ot={class:"header-anchor",href:"#jstatd-远程主机信息收集"},pt={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jstatd.html#BABEHFHF",target:"_blank",rel:"noopener noreferrer"},rt=e(`<p>jstatd，即虚拟机的jstat守护进程，主要用于监控JVM的创建与终止，并提供一个接口允许远程监控工具依附到在本地主机上运行的JVM。</p><p><strong>用法</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>jstatd [ options ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>options</p><p>命令行选项。这些选项可以是任意顺序。如果存在多余的或者自相矛盾的选项，则优先考虑最后的选项。</p></li></ul><p><strong>描述</strong></p><p>jstatd工具是一个RMI服务器应用程序，主要用于监控HotSpot Java 虚拟机的创建与终止，并提供一个接口以允许远程监控工具附加到本地主机上运行的JVM上。</p><p>jstatd服务器需要在本地主机上存在一个RMI注册表。jstatd服务器将尝试在默认端口或-p port选项指定的端口附加到该RMI注册表上。如果RMI注册表不存在，jstatd应用程序将会自动创建一个，并绑定到-p port选项指定的端口上，如果省略了-p port选项，则绑定到默认的RMI注册表端口。你可以通过指定-nr选项来抑制内部RMI注册表的创建。</p><h3 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h3>`,8),ct={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://visualvm.github.io/",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://eclipse.dev/mat/",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://arthas.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://www.oracle.com/java/technologies/jdk-mission-control.html",target:"_blank",rel:"noopener noreferrer"};function kt(bt,vt){const n=i("ExternalLinkIcon");return o(),p("div",null,[c,t("p",null,[t("a",d,[a("参考文档"),s(n)])]),u,t("p",null,[t("a",g,[a("JAVA 生产环境下性能监控与调优详解"),s(n)])]),t("p",null,[t("a",h,[a("当小白遇到FullGC | 京东云技术团队"),s(n)])]),t("p",null,[t("a",m,[a("Arthas+JVM命令实战指南：快速定位并解决JVM内存溢出问题"),s(n)])]),k,t("ol",null,[b,t("li",null,[v,t("ul",null,[t("li",null,[t("p",null,[a("打印GC日志，通过"),t("a",f,[a("GCviewer"),s(n)]),a("或者"),t("a",G,[a("gceasy"),s(n)]),a("来分析日志信息")])]),X,C,j,_])]),x]),z,t("p",null,[t("a",y,[a("官方文档"),s(n)])]),t("h4",M,[t("a",P,[t("span",null,[t("a",S,[a("jps 虚拟机进程状况"),s(n)])])])]),w,q,t("h4",J,[t("a",T,[t("span",null,[t("a",V,[a("jstat 收集虚拟机运行数据"),s(n)])])])]),E,t("h4",R,[t("a",D,[t("span",null,[t("a",O,[a("jinfo Java配置信息工具"),s(n)])])])]),B,F,t("h4",A,[t("a",U,[t("span",null,[t("a",N,[a("jmap 内存映射工具"),s(n)])])])]),H,t("h4",I,[t("a",L,[t("span",null,[t("a",W,[a("jhat 堆转储快照分析工具"),s(n)])])])]),K,t("h4",Z,[t("a",Y,[t("span",null,[t("a",Q,[a("jstack Java堆栈跟踪工具"),s(n)])])])]),$,tt,t("h4",at,[t("a",nt,[t("span",null,[t("a",st,[a("jcmd 虚拟机诊断命令"),s(n)])])])]),et,lt,t("h4",it,[t("a",ot,[t("span",null,[t("a",pt,[a("jstatd 远程主机信息收集"),s(n)])])])]),rt,t("ol",null,[t("li",null,[t("a",ct,[a("jConsole"),s(n)])]),t("li",null,[t("a",dt,[a("Visual VM"),s(n)])]),t("li",null,[t("a",ut,[a("Eclipse MAT"),s(n)])]),t("li",null,[t("a",gt,[a("JProfiler"),s(n)])]),t("li",null,[t("a",ht,[a("Arthas"),s(n)])]),t("li",null,[t("a",mt,[a("Java Mission Control"),s(n)])])])])}const Xt=l(r,[["render",kt],["__file","jvm.html.vue"]]),Ct=JSON.parse('{"path":"/code/java/jvm.html","title":"JVM","lang":"zh-CN","frontmatter":{"order":14,"title":"JVM","date":"2021-07-01T00:00:00.000Z","category":"Java","tag":"Java","timeline":true,"article":true,"description":"JVM（Java虚拟机）内存模型是Java平台规范的一部分，它定义了如何在JVM中管理内存，以及Java程序在执行过程中的内存使用规则。这一模型确保了跨平台的Java程序具有确定性的行为。JVM内存模型主要分为几个关键区域：堆、栈、程序计数器、本地方法栈、方法区 JVM内存模型 JVM内存模型 线程共享：堆、方法区 线程独享：虚拟机栈、程序计数器、本地...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/java/jvm.html"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM（Java虚拟机）内存模型是Java平台规范的一部分，它定义了如何在JVM中管理内存，以及Java程序在执行过程中的内存使用规则。这一模型确保了跨平台的Java程序具有确定性的行为。JVM内存模型主要分为几个关键区域：堆、栈、程序计数器、本地方法栈、方法区 JVM内存模型 JVM内存模型 线程共享：堆、方法区 线程独享：虚拟机栈、程序计数器、本地..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1702296545251-14404f88-739e-46fd-8de4-7ee6cbe618a6.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T08:47:04.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-07-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-26T08:47:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1702296545251-14404f88-739e-46fd-8de4-7ee6cbe618a6.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1702296505567-b1b0c93b-bca4-48b4-b451-62e8f700f7fc.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1715525875467-212eae86-8358-446a-81d8-3ec21e44a37f.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1715525916410-043c5f5a-261d-4c5d-a552-b3ae027fbc9d.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/202504271712636.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240801235029585.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240802001210466.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804141959387.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142035143.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142120496.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804142448150.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804100840750.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240917232425222.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240917205336308.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240804205727545.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1704206996779-df0c9c8d-8e4d-4a82-aa36-a21a3e369ef0.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372236245-d42c4444-ba3e-4bc8-a289-b5a2e355e3aa.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1704207097037-e17da0c3-19d8-44ac-92d5-9bd79029650a.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372377866-0cb243ba-a322-4c3b-99a6-cd5b664984cf.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372330181-201d48b5-7e83-42f6-ac6d-a490c5c8b0a2.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20240701110942786.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20241105201150848.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372426504-0d317319-6105-44e9-8937-3c55fb075b3d.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1705372447216-f8284e21-6894-4d29-afa1-dbb91b3ece46.png\\"],\\"datePublished\\":\\"2021-07-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-26T08:47:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"JVM内存模型","slug":"jvm内存模型","link":"#jvm内存模型","children":[{"level":3,"title":"JVM内存模型","slug":"jvm内存模型-1","link":"#jvm内存模型-1","children":[{"level":4,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":4,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":4,"title":"方法区","slug":"方法区","link":"#方法区","children":[]}]},{"level":3,"title":"对象内存布局","slug":"对象内存布局","link":"#对象内存布局","children":[{"level":4,"title":"创建对象的方法","slug":"创建对象的方法","link":"#创建对象的方法","children":[]},{"level":4,"title":"从执行步骤角度分析","slug":"从执行步骤角度分析","link":"#从执行步骤角度分析","children":[]},{"level":4,"title":"类加载","slug":"类加载","link":"#类加载","children":[{"level":5,"title":"类加载器：","slug":"类加载器","link":"#类加载器","children":[]},{"level":5,"title":"类加载流程：","slug":"类加载流程","link":"#类加载流程","children":[]}]},{"level":4,"title":"五种引用","slug":"五种引用","link":"#五种引用","children":[]}]}]},{"level":2,"title":"GC","slug":"gc","link":"#gc","children":[{"level":3,"title":"垃圾判别算法","slug":"垃圾判别算法","link":"#垃圾判别算法","children":[]},{"level":3,"title":"垃圾清除算法","slug":"垃圾清除算法","link":"#垃圾清除算法","children":[]},{"level":3,"title":"垃圾回收器","slug":"垃圾回收器","link":"#垃圾回收器","children":[{"level":4,"title":"1. Serial/Serial Old 回收器","slug":"_1-serial-serial-old-回收器","link":"#_1-serial-serial-old-回收器","children":[]},{"level":4,"title":"2. Parallel/Parallel Old 回收器","slug":"_2-parallel-parallel-old-回收器","link":"#_2-parallel-parallel-old-回收器","children":[]},{"level":4,"title":"3. CMS 回收器","slug":"_3-cms-回收器","link":"#_3-cms-回收器","children":[]},{"level":4,"title":"4. G1 回收器","slug":"_4-g1-回收器","link":"#_4-g1-回收器","children":[]},{"level":4,"title":"总结","slug":"总结","link":"#总结","children":[]}]}]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[{"level":3,"title":"栈","slug":"栈-1","link":"#栈-1","children":[]},{"level":3,"title":"堆","slug":"堆-1","link":"#堆-1","children":[]},{"level":3,"title":"方法区","slug":"方法区-1","link":"#方法区-1","children":[]},{"level":3,"title":"GC","slug":"gc-1","link":"#gc-1","children":[]},{"level":3,"title":"查看运行时 JVM 参数","slug":"查看运行时-jvm-参数","link":"#查看运行时-jvm-参数","children":[]},{"level":3,"title":"JIT编译器","slug":"jit编译器","link":"#jit编译器","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"调优","slug":"调优","link":"#调优","children":[{"level":3,"title":"优化案例","slug":"优化案例","link":"#优化案例","children":[{"level":4,"title":"1.合理配置堆内存","slug":"_1-合理配置堆内存","link":"#_1-合理配置堆内存","children":[]},{"level":4,"title":"2.JIT编译器优化","slug":"_2-jit编译器优化","link":"#_2-jit编译器优化","children":[]},{"level":4,"title":"3.内存溢出排查方案","slug":"_3-内存溢出排查方案","link":"#_3-内存溢出排查方案","children":[]},{"level":4,"title":"4.CPU占用率很高的排查方案","slug":"_4-cpu占用率很高的排查方案","link":"#_4-cpu占用率很高的排查方案","children":[]},{"level":4,"title":"5.频繁 GC","slug":"_5-频繁-gc","link":"#_5-频繁-gc","children":[]}]},{"level":3,"title":"命令","slug":"命令","link":"#命令","children":[{"level":4,"title":"jps 虚拟机进程状况","slug":"jps-虚拟机进程状况","link":"#jps-虚拟机进程状况","children":[]},{"level":4,"title":"jstat 收集虚拟机运行数据","slug":"jstat-收集虚拟机运行数据","link":"#jstat-收集虚拟机运行数据","children":[]},{"level":4,"title":"jinfo Java配置信息工具","slug":"jinfo-java配置信息工具","link":"#jinfo-java配置信息工具","children":[]},{"level":4,"title":"jmap 内存映射工具","slug":"jmap-内存映射工具","link":"#jmap-内存映射工具","children":[]},{"level":4,"title":"jhat 堆转储快照分析工具","slug":"jhat-堆转储快照分析工具","link":"#jhat-堆转储快照分析工具","children":[]},{"level":4,"title":"jstack Java堆栈跟踪工具","slug":"jstack-java堆栈跟踪工具","link":"#jstack-java堆栈跟踪工具","children":[]},{"level":4,"title":"jcmd 虚拟机诊断命令","slug":"jcmd-虚拟机诊断命令","link":"#jcmd-虚拟机诊断命令","children":[]},{"level":4,"title":"jstatd 远程主机信息收集","slug":"jstatd-远程主机信息收集","link":"#jstatd-远程主机信息收集","children":[]}]},{"level":3,"title":"工具","slug":"工具","link":"#工具","children":[]}]}],"git":{"createdTime":1716794801000,"updatedTime":1748249224000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":28},{"name":"mozzie","email":"du.mozzie@outlook.com","commits":9}]},"readingTime":{"minutes":32.14,"words":9643},"filePathRelative":"code/java/jvm.md","localizedDate":"2021年7月1日","excerpt":"<p>JVM（Java虚拟机）内存模型是Java平台规范的一部分，它定义了如何在JVM中管理内存，以及Java程序在执行过程中的内存使用规则。这一模型确保了跨平台的Java程序具有确定性的行为。JVM内存模型主要分为几个关键区域：堆、栈、程序计数器、本地方法栈、方法区</p>","autoDesc":true}');export{Xt as comp,Ct as data};
