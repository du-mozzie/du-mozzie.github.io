import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,h as t}from"./app-C1woMVil.js";const e={},o=t(`<h1 id="springboot自动配置原理" tabindex="-1"><a class="header-anchor" href="#springboot自动配置原理"><span>SpringBoot自动配置原理</span></a></h1><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//核心源码</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration"><span>@SpringBootConfiguration</span></a></h2><p>代表当前是一个配置类</p><h2 id="enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration"><span>@EnableAutoConfiguration</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Environment property that can be used to override when auto-configuration is
	 * enabled.
	 */</span>
	<span class="token class-name">String</span> <span class="token constant">ENABLED_OVERRIDE_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.boot.enableautoconfiguration&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Exclude specific auto-configuration classes such that they will never be applied.
	 * <span class="token keyword">@return</span> the classes to exclude
	 */</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Exclude specific auto-configuration class names such that they will never be
	 * applied.
	 * <span class="token keyword">@return</span> the class names to exclude
	 * <span class="token keyword">@since</span> 1.3.0
	 */</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@AutoConfigurationPackage</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//@Import给容器中导入组件</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//利用Registrar给容器中导入一系列组件</span>
<span class="token comment">//将指定的一个包下面的所有组件导进来，SpringBoot启动类所在的包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@Import(AutoConfigurationImportSelector.class)</p></blockquote><ol><li><p>getAutoConfigurationEntry(annotationMetadata)给容器中批量导入一些组件</p></li><li><p>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取所有需要导入容器的配置类</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607075728090.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607080322989.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>工厂加载器加载<code>private static Map\\&lt;String, List\\&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) {}</code>得到所有的组件，从META-INF/spring.factories下获取；<mark>spring-boot-autoconfigure-2.5.0.jar</mark>文件里写死了一启动就要加载的所有配置类</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607081425971.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li></ul></li><li><p>虽然一开始默认加载了131个配置类，按照条件规则<code>@Conditional</code>最终会按需配置</p><p><code>在配置类下有一个注解@Conditional，获取该注解的条件来判断该配置类是否使用，如果使用了就会生效，最终在排除配置类的时候会保留该配置类</code></p><ul><li>SpringBoot会在底层默认配置好组件，如果用户自己配置了就以用的的优先，@ConditionalOnMissingBean</li></ul><p><strong>总结：</strong></p><ol><li>SpringBoot默认会加载所有的配置类<code>spring-boot-autoconfigure-2.5.0.jar</code>下的 xxxAutoConfigure</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的参数，xxxProperties里面拿，xxxProperties和配置文件进行了绑定</li><li>生效的配置类会在容器中装配很多组件</li><li>只要容器有了这些组件，相当于这些功能都有了</li><li>定制化配置 <ul><li>用户直接自己实现配置类的组件@Bean装配到容器中</li><li>查看组件的配置文件的参数，去Application.properties中修改</li></ul></li></ol><p>xxxAutoConfiguration ---&gt; 组件 ---&gt; xxxProperties获取参数 &lt;--<code>绑定</code>--&gt; Application.properties</p></li></ol><h2 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan"><span>@ComponentScan</span></a></h2><p>包扫描，指定我们要扫描哪些</p><h2 id="自动装配第三方依赖" tabindex="-1"><a class="header-anchor" href="#自动装配第三方依赖"><span>自动装配第三方依赖</span></a></h2><p>一、需求描述 写了一个maven项目封装一套组件可以给第三方使用，如果第三方直接引用依赖，Spring Boot不会对引用的jar中的配置类（如带有@Configuration的类）</p><p>解决方案：</p><ol><li><p>使用者手动配置 @ComponentScan</p><p>测试</p></li><li><p>配置开关决定是否开启配置</p></li><li><p>Spring Boot 主动加载 这三种方式友好程度依次递增</p></li></ol><h3 id="_1、使用-componentscan" tabindex="-1"><a class="header-anchor" href="#_1、使用-componentscan"><span>1、使用@ComponentScan</span></a></h3><p>只需在SpringBoot启动类或自定义的配置类中添加 <strong>@ComponentScan</strong> 注解即可</p><ul><li><p>启动类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.du.config&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiyListenerApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DiyListenerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.du.config&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、通过配置开关" tabindex="-1"><a class="header-anchor" href="#_2、通过配置开关"><span>2、通过配置开关</span></a></h3><ul><li><p>在自定义组件中添加配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在自定义组件中添加注解开关</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">TestConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableTestConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在自定义的配置类中开启配置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTestConfig</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接在启动类中添加 <strong>@EnableTestConfig</strong> 注解。</p></li></ul><h3 id="_3、spring-自动配置" tabindex="-1"><a class="header-anchor" href="#_3、spring-自动配置"><span>3、Spring 自动配置</span></a></h3><p>在自定义配置类的resources中新建META-INF目录并添加spring.factories配置文件</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607105520928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加配置</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration\\
</span> <span class="token value attr-value"> com.du.config.MyConfig</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <strong>org.springframework.boot.autoconfigure.EnableAutoConfiguration</strong> 代表自动配置的 key，即代表需要自动配置哪些类，<code>\\</code> 可以理解为一个换行符，则该行下面的每行当做一个参数。</p><p>从第二行开始都是一个配置类，需要填写该配置类的全限定名</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li>在 Spring Boot 项目中的引导类上有一个注解 @SpringBootApplication，这个注解是对三个注解进行了封装，分别是： <ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul></li><li>其中 <strong>@EnableAutoConfiguration</strong> 是实现自动化配置的核心注解。该注解通过 <strong>@Import</strong> 注解导入对应的配置选择器。内部就是读取了该项目和该项目引I用的 Jar 包的的 classpath 路径下 <strong>META-INF/spring.factories</strong> 文件中的所配置的类的全类名。在这些配置类中所定义的 Bean 会根据条件注解<strong>所指定的条件来决定</strong>是否需要将其导入到 Spring 容器中。</li><li>条件判断会有像 <strong>@ConditionalOnClass</strong> 这样的注解，判断是否有对应的 class 文件，如果有则加载该类，把这个配置类的所有的 Bean 放入 Spring 容器中使用。</li></ol>`,30),i=[o];function p(c,l){return a(),s("div",null,i)}const d=n(e,[["render",p],["__file","auto-configuration.html.vue"]]),g=JSON.parse('{"path":"/code/spring/boot/auto-configuration.html","title":"SpringBoot自动配置原理","lang":"zh-CN","frontmatter":{"order":1,"title":"SpringBoot自动配置原理","date":"2021-10-09T00:00:00.000Z","category":["Spring Boot"],"tag":["Spring Boot"],"timeline":true,"article":true,"prev":"./","description":"SpringBoot自动配置原理 @SpringBootConfiguration 代表当前是一个配置类 @EnableAutoConfiguration @AutoConfigurationPackage @Import(AutoConfigurationImportSelector.class) getAutoConfigurationEntry(...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/spring/boot/auto-configuration.html"}],["meta",{"property":"og:title","content":"SpringBoot自动配置原理"}],["meta",{"property":"og:description","content":"SpringBoot自动配置原理 @SpringBootConfiguration 代表当前是一个配置类 @EnableAutoConfiguration @AutoConfigurationPackage @Import(AutoConfigurationImportSelector.class) getAutoConfigurationEntry(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607075728090.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T11:59:43.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2021-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T11:59:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot自动配置原理\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607075728090.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607080322989.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607081425971.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607105520928.png\\"],\\"datePublished\\":\\"2021-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T11:59:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"@SpringBootConfiguration","slug":"springbootconfiguration","link":"#springbootconfiguration","children":[]},{"level":2,"title":"@EnableAutoConfiguration","slug":"enableautoconfiguration","link":"#enableautoconfiguration","children":[]},{"level":2,"title":"@ComponentScan","slug":"componentscan","link":"#componentscan","children":[]},{"level":2,"title":"自动装配第三方依赖","slug":"自动装配第三方依赖","link":"#自动装配第三方依赖","children":[{"level":3,"title":"1、使用@ComponentScan","slug":"_1、使用-componentscan","link":"#_1、使用-componentscan","children":[]},{"level":3,"title":"2、通过配置开关","slug":"_2、通过配置开关","link":"#_2、通过配置开关","children":[]},{"level":3,"title":"3、Spring 自动配置","slug":"_3、spring-自动配置","link":"#_3、spring-自动配置","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1721987655000,"updatedTime":1722254383000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":3.92,"words":1175},"filePathRelative":"code/spring/boot/auto-configuration.md","localizedDate":"2021年10月9日","excerpt":"\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">//核心源码</span>\\n<span class=\\"token annotation punctuation\\">@SpringBootConfiguration</span>\\n<span class=\\"token annotation punctuation\\">@EnableAutoConfiguration</span>\\n<span class=\\"token annotation punctuation\\">@ComponentScan</span><span class=\\"token punctuation\\">(</span>excludeFilters <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token annotation punctuation\\">@Filter</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">FilterType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CUSTOM</span><span class=\\"token punctuation\\">,</span> classes <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">TypeExcludeFilter</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token annotation punctuation\\">@Filter</span><span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">FilterType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CUSTOM</span><span class=\\"token punctuation\\">,</span> classes <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">AutoConfigurationExcludeFilter</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token annotation punctuation\\">@interface</span> <span class=\\"token class-name\\">SpringBootApplication</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,g as data};
