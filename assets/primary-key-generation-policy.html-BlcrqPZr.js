import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,d as a,e,h as t}from"./app-BhVVbJTt.js";const l={},r=t('<p>在数据库设计中，主键生成策略是非常关键的一环，它影响着数据的唯一性、性能和可扩展性。以下是几种常见的主键生成策略：uuid、自增id、雪花算法、redis、zookeeper</p><h2 id="雪花算法" tabindex="-1"><a class="header-anchor" href="#雪花算法"><span>雪花算法</span></a></h2><p>雪花算法这一在分布式架构中很常见的玩意，但一般也不需要怎么去深入了解，一方面一般个人项目用不到分布式之类的大型架构，另一方面，就算要用到，市面上很多ID生成器也帮我们完成了这项工作。</p><h2 id="分布式id的特点" tabindex="-1"><a class="header-anchor" href="#分布式id的特点"><span>分布式ID的特点</span></a></h2><h4 id="全局唯一性" tabindex="-1"><a class="header-anchor" href="#全局唯一性"><span>全局唯一性</span></a></h4><p>不能出现有重复的ID标识，这是基本要求。</p><h4 id="递增性" tabindex="-1"><a class="header-anchor" href="#递增性"><span>递增性</span></a></h4><p>确保生成ID对于用户或业务是递增的。</p><h4 id="高可用性" tabindex="-1"><a class="header-anchor" href="#高可用性"><span>高可用性</span></a></h4><p>确保任何时候都能生成正确的ID。</p><h4 id="高性能性" tabindex="-1"><a class="header-anchor" href="#高性能性"><span>高性能性</span></a></h4><p>在高并发的环境下依然表现良好。</p><h2 id="分布式id的常见解决方案" tabindex="-1"><a class="header-anchor" href="#分布式id的常见解决方案"><span>分布式ID的常见解决方案</span></a></h2><h4 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid"><span>UUID</span></a></h4><p>Java自带的生成一串唯一随机36位字符串（32个字符串+4个“-”）的算法。它可以保证唯一性，且据说够用N亿年，但是其业务可读性差，无法有序递增。</p><h4 id="snowflake" tabindex="-1"><a class="header-anchor" href="#snowflake"><span>SnowFlake</span></a></h4><p>雪花算法，它是Twitter开源的由64位整数组成分布式ID，性能较高，并且在单机上递增。 具体参考：</p>',17),d={href:"https://link.zhihu.com/?target=https%3A//github.com/twitter-archive/snowflake",target:"_blank",rel:"noopener noreferrer"},u=n("h4",{id:"uidgenerator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uidgenerator"},[n("span",null,"UidGenerator")])],-1),k=n("p",null,"UidGenerator是百度开源的分布式ID生成器，其基于雪花算法实现。 具体参考：",-1),m={href:"https://link.zhihu.com/?target=https%3A//github.com/baidu/uid-generator/blob/master/README.zh_cn.md",target:"_blank",rel:"noopener noreferrer"},v=n("h4",{id:"leaf",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leaf"},[n("span",null,"Leaf")])],-1),b=n("p",null,"Leaf是美团开源的分布式ID生成器，能保证全局唯一，趋势递增，但需要依赖关系数据库、Zookeeper等中间件。 具体参考：",-1),h={href:"https://link.zhihu.com/?target=https%3A//tech.meituan.com/MT_Leaf.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="雪花算法的概要" tabindex="-1"><a class="header-anchor" href="#雪花算法的概要"><span>雪花算法的概要</span></a></h3><p>SnowFlake是Twitter公司采用的一种算法，目的是在分布式系统中产生全局唯一且趋势递增的ID。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210421135210471.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><h4 id="组成部分-64bit" tabindex="-1"><a class="header-anchor" href="#组成部分-64bit"><span>组成部分（64bit）</span></a></h4><ol><li><strong>第一位</strong>0000000000000 占用1bit，其值始终是0，没有实际作用。</li><li><strong>时间戳</strong> 占用41bit，精确到毫秒，总共可以容纳约69年的时间。</li><li><strong>工作机器id</strong> 占用10bit，其中高位5bit是数据中心ID，低位5bit是工作节点ID，做多可以容纳1024个节点。</li><li><strong>序列号</strong> 占用12bit，每个节点每毫秒0开始不断累加，最多可以累加到4095，一共可以产生4096个ID。</li></ol><p>SnowFlake算法在同一毫秒内最多可以生成多少个全局唯一ID呢：： <strong>同一毫秒的ID数量 = 1024 X 4096 = 4194304</strong></p><h2 id="雪花算法的实现" tabindex="-1"><a class="header-anchor" href="#雪花算法的实现"><span>雪花算法的实现</span></a></h2><p>雪花算法的实现主要依赖于数据中心ID和数据节点ID这两个参数，具体实现如下。</p><h4 id="java实现" tabindex="-1"><a class="header-anchor" href="#java实现"><span>JAVA实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdWorker</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 开始时间截 (2015-01-01)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1420041600000L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 机器id所占的位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 数据标识id所占的位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 支持的最大数据标识id，结果是31
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 序列在id中占的位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 机器ID向左移12位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 数据标识id向左移17位(12+5)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 时间截向左移22位(5+5+12)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 工作机器ID(0~31)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 数据中心ID(0~31)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 毫秒内序列(0~4095)
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 上次生成ID的时间截
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 构造函数
     * <span class="token keyword">@param</span> <span class="token parameter">workerId</span>     工作ID (0~31)
     * <span class="token keyword">@param</span> <span class="token parameter">datacenterId</span> 数据中心ID (0~31)
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;worker Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 获得下一个ID (该方法是线程安全的)
     * <span class="token keyword">@return</span> SnowflakeId
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>
                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果是同一时间生成的，则进行毫秒内序列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token comment">// 毫秒内序列溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//阻塞到下一个毫秒,获得新的时间戳</span>
                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 时间戳改变，毫秒内序列重置</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 上次生成ID的时间截</span>
        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
        <span class="token comment">// 移位并通过或运算拼到一起组成64位的ID</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 阻塞到下一个毫秒，直到获得新的时间戳
     * <span class="token keyword">@param</span> <span class="token parameter">lastTimestamp</span> 上次生成ID的时间截
     * <span class="token keyword">@return</span> 当前时间戳
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 返回以毫秒为单位的当前时间
     * <span class="token keyword">@return</span> 当前时间(毫秒)
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SnowflakeIdWorker</span> idWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> id <span class="token operator">=</span> idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,4);function y(g,f){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[a("https://github.com/twitter-archive/snowflake"),e(s)])])]),u,k,n("blockquote",null,[n("p",null,[n("a",m,[a("https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md"),e(s)])])]),v,b,n("blockquote",null,[n("p",null,[n("a",h,[a("https://tech.meituan.com/MT_Leaf.html"),e(s)])])]),w])}const _=p(l,[["render",y],["__file","primary-key-generation-policy.html.vue"]]),x=JSON.parse('{"path":"/code/mysql/primary-key-generation-policy.html","title":"主键生成策略","lang":"zh-CN","frontmatter":{"order":3,"title":"主键生成策略","date":"2021-08-03T00:00:00.000Z","category":"MySQL","tag":"MySQL","timeline":true,"article":true,"description":"在数据库设计中，主键生成策略是非常关键的一环，它影响着数据的唯一性、性能和可扩展性。以下是几种常见的主键生成策略：uuid、自增id、雪花算法、redis、zookeeper 雪花算法 雪花算法这一在分布式架构中很常见的玩意，但一般也不需要怎么去深入了解，一方面一般个人项目用不到分布式之类的大型架构，另一方面，就算要用到，市面上很多ID生成器也帮我们完...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/mysql/primary-key-generation-policy.html"}],["meta",{"property":"og:title","content":"主键生成策略"}],["meta",{"property":"og:description","content":"在数据库设计中，主键生成策略是非常关键的一环，它影响着数据的唯一性、性能和可扩展性。以下是几种常见的主键生成策略：uuid、自增id、雪花算法、redis、zookeeper 雪花算法 雪花算法这一在分布式架构中很常见的玩意，但一般也不需要怎么去深入了解，一方面一般个人项目用不到分布式之类的大型架构，另一方面，就算要用到，市面上很多ID生成器也帮我们完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210421135210471.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T02:36:36.000Z"}],["meta",{"property":"article:author","content":"Du"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2021-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T02:36:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"主键生成策略\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210421135210471.png\\"],\\"datePublished\\":\\"2021-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-07T02:36:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Du\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"雪花算法","slug":"雪花算法","link":"#雪花算法","children":[]},{"level":2,"title":"分布式ID的特点","slug":"分布式id的特点","link":"#分布式id的特点","children":[]},{"level":2,"title":"分布式ID的常见解决方案","slug":"分布式id的常见解决方案","link":"#分布式id的常见解决方案","children":[{"level":3,"title":"雪花算法的概要","slug":"雪花算法的概要","link":"#雪花算法的概要","children":[]}]}],"git":{"createdTime":1717143455000,"updatedTime":1717727796000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":4.55,"words":1365},"filePathRelative":"code/mysql/primary-key-generation-policy.md","localizedDate":"2021年8月3日","excerpt":"<p>在数据库设计中，主键生成策略是非常关键的一环，它影响着数据的唯一性、性能和可扩展性。以下是几种常见的主键生成策略：uuid、自增id、雪花算法、redis、zookeeper</p>","autoDesc":true}');export{_ as comp,x as data};
