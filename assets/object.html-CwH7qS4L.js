import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,h as p}from"./app-D7UmeDZD.js";const t={},e=p(`<h1 id="面向对象程序" tabindex="-1"><a class="header-anchor" href="#面向对象程序"><span>面向对象程序</span></a></h1><p>Java 是一种面向对象编程（OOP）语言，其核心思想是通过对象和类来组织程序代码。面向对象编程具有四个主要特性：封装、继承、多态和抽象。</p><h2 id="_1、面向对象" tabindex="-1"><a class="header-anchor" href="#_1、面向对象"><span>1、面向对象</span></a></h2><p>面向对象编程思想：将程序模块化的思想。</p><ul><li>什么是面向对象？</li></ul><p>面向对象编程思想诞生之前，程序开发采用的是面向过程的结构化编程方式，是一种面向功能划分的软件结构。</p><p>最小粒度细化到方法这一层。</p><p>面向过程注重的是每一个步骤，面向对象关注点在于整件事情的模块化结构。</p><ul><li>类和对象</li></ul><p>类和对象的关系</p><p>每个对象都有特定的特征：1、属性。2、方法。</p><p>属性指的是对象的静态特征，方法用来描述对象的动态特征。</p><p>对象是用来描述客观存在的一个实体，改实体是由一组属性和方法构成。</p><p>类是与对象紧密结合的另外一个概念，类是产生对象的模版，所有的对象都是通过类来创建的。</p><p>二者的关系：类是对象的抽象化描述，这些对象具有相同的特征和动作（属性和方法）。</p><p>​ 对象是类的具体实例。</p><p>Java 程序是以类位组织单元，程序运行时的主体是通过类创建的具体对象。</p><p><strong>三大特征：封装、继承、多态</strong></p><h2 id="_2、定义类" tabindex="-1"><a class="header-anchor" href="#_2、定义类"><span>2、定义类</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>
    <span class="token comment">//定义属性，属性名符合驼峰式命名法</span>
    <span class="token keyword">public</span> 数据类型 属性名<span class="token punctuation">;</span>
    <span class="token comment">//定义方法，方法名符合驼峰式命名法</span>
    <span class="token keyword">public</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token operator">:</span>数据类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 关于返回值的定义分为两类：有返回值和无返回值，有返回值的方法需要在方法定义时指定返回值的数据类型，并在方法体中用return 将结果返回给外部调用者，加法运算。</p><p>如果一个方法不需要进行返回操作，将返回值类型定义为 void。</p><p>参数列表是指外部在调用该方法时需要传入到方法内部进行运算的数据。</p><h2 id="_3、构造函数、构造方法、构造器" tabindex="-1"><a class="header-anchor" href="#_3、构造函数、构造方法、构造器"><span>3、构造函数、构造方法、构造器</span></a></h2><p>构造函数是一种特殊的方法，普通方法是用来描述某个动作的，构造方法是用来创建对象的。</p><ul><li>方法名必须与类名一致。</li><li>不需要定义返回值类型。</li></ul><p>构造函数可分为有参构造和无参构造，有参构造是指带参数的构造函数，无参构造是指没有参数的构造函数。</p><p>任何一个类都默认自带一个无参构造函数，如果手动在类中定义一个有参构造，则会覆盖默认的无参构造。</p><h2 id="_4、this-关键字" tabindex="-1"><a class="header-anchor" href="#_4、this-关键字"><span>4、this 关键字</span></a></h2><p>this 用来指代当前类的实例化对象，通过 this 可以调用当前类的属性和方法，比如在有参构造中，通过 this 将外部传入的值赋给当前类的实例化对象。</p><p>this 除了可以在类中访问属性也可以在类中调用方法，类中的方法可以分为两类：构造方法、普通方法，用 this 调用这两类方法的语法也不同。</p><p>1、调用构造函数的语法是 this(参数列表)，不能在普通方法中使用 this 调用构造函数。</p><p>2、用 this 调用普通方法，this.方法名(参数列表)，可以在构造函数中使用，也可以在普通方法中使用。</p><h2 id="_5、成员变量和局部变量" tabindex="-1"><a class="header-anchor" href="#_5、成员变量和局部变量"><span>5、成员变量和局部变量</span></a></h2><p>变量的作用域是指在程序中可以通过变量名来访问该变量的范围，变量的作用域由变量被声明时所在位置决定的，Java 中根据不同的作用域可以将变量分为成员变量和局部变量。</p><p>局部变量：如果一个变量<strong>在方法中声明</strong>，则该变量是局部变量。</p><p>成员变量：如果一个变量<strong>在方法外，类中声明</strong>，则该变量是成员变量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、成员变量和局部变量的区别在于作用域不同，成员变量的作用域在整个类中，类中的每个方法都可以访问该变量，局部变量的作用域只在定义该变量的方法中，出了方法体就无法访问。</p><p>2、成员变量和局部变量的初始值也不同，局部变量不会赋初始值，成员变量会赋初始值，具体的值是由成员变量的数据类型决定的。</p><h2 id="_6、封装" tabindex="-1"><a class="header-anchor" href="#_6、封装"><span>6、封装</span></a></h2><p>封装是指将类的属性隐藏在内部，外部不能直接访问和修改，如何实现？通过修改成员变量的可见性，从公有改为私有。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生信息如下：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生编号：&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生姓名：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生年龄：&quot;</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数值有误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装的核心思想就是尽可能把<strong>属性都隐藏在内部</strong>，对外提供方法来访问，我们可以在这些方法中添加逻辑处理来实现过滤，以屏蔽错误数据的赋值。</p><p>封装的步骤：</p><ul><li>修改属性（成员变量）的访问权限为私有，使得外部不能直接访问。</li><li>提供外部可以直接调用的方法。</li><li>在该方法中加入对于属性的逻辑控制，避免出现逻辑上的错误。</li></ul><blockquote><p>什么是访问权限？</p></blockquote><p>访问权限是指该属性可以被直接访问的范围，是在属性定义时设定的，访问权限的可选项一共有 4 种：区别在于作用域范围不同。</p><table><thead><tr><th>同一个类</th><th>同一个包</th><th>不同包的子类</th><th>不同包的非子类</th><th></th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>默认(default)</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><h2 id="_7、static" tabindex="-1"><a class="header-anchor" href="#_7、static"><span>7、static</span></a></h2><p>static 表示静态或者全局，可以用来修饰成员变量和成员方法以及代码块。</p><p>使用 static 修饰的成员变量和成员方法<strong>独立于该类的任何一个实例化对象</strong>，访问时不依赖于该类的对象，而是直接通过类去访问，可以理解为被该类的所有实例对象所共用，所以说是<strong>全局的</strong>。</p><p>static 还可以修饰代码块，被 static 修饰的代码块叫做静态代码块。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态代码块的特点是只执行一次，什么时候执行？当这个类被加载到内存时执行，不需要开发者手动调用，会自动执行。</p><p>被加载到内存中的类叫做运行时类，静态代码块就是在家中类的时候执行的，因为类只加载一次，所以静态代码块也只执行一次。</p><h2 id="_8、继承" tabindex="-1"><a class="header-anchor" href="#_8、继承"><span>8、继承</span></a></h2><ul><li>什么是继承？</li></ul><p>继承是用来描述类之间的关系的，即一个类继承（拥有）另外一个类中的属性和方法，被继承的类叫做父类，继承父类的类叫做子类。</p><p>继承的基本语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> 类名 <span class="token keyword">extends</span> 父类名<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">char</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 中的继承是单继承，也就是说一个子类只能有一个直接父类。</p><h4 id="_8-1、子类访问父类" tabindex="-1"><a class="header-anchor" href="#_8-1、子类访问父类"><span>8.1、子类访问父类</span></a></h4><p><strong>创建一个子类对象的时候，会默认先创建一个父类对象，无论是通过有参构造或是无参构造来创建子类对象，都是通过【无参构造来创建父类对象的】。</strong></p><p>可以通过 super 关键字让子类创建对象时调用父类的有参构造。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过无参构造创建了Student对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token number">1234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类可以访问父类的构造方法、普通方法、成员变量，都是通过 super 关键字来完成，具体语法：</p><p>构造方法：super(参数列表)</p><p>普通方法：super.方法名(参数列表)</p><p>成员变量：super.成员变量名</p><p>在子类的构造方法中，可以通过 super 访问父类的构造方法和普通方法。</p><p>在子类的普通方法中，只能通过 super 访问父类的普通方法。</p><h4 id="_8-2、子类的访问权限" tabindex="-1"><a class="header-anchor" href="#_8-2、子类的访问权限"><span>8.2、子类的访问权限</span></a></h4><p>访问权限修饰符：public、protected、默认修饰符、private。</p><table><thead><tr><th>属性</th><th>同一个类中</th><th>同包</th><th>子类（不同包）</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>可以访问</td></tr><tr><td>protected</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>不能访问</td></tr><tr><td>默认修饰符</td><td>可以访问</td><td>可以访问</td><td>不能访问</td><td>不能访问</td></tr><tr><td>private</td><td>可以访问</td><td>不能访问</td><td>不能访问</td><td>不能访问</td></tr></tbody></table><p>包：package，用来管理 Java 文件，一个项目中不可避免会出现同名的 Java 类，为了防止产生冲突，可以把同名的 Java 类分别放入不同的包中。</p><p>包的命名规范：包名由小写字母组成，不能以 . 开头或结尾，可以包含数字，但不能以数字开头，使用 . 来分层。</p><p>包的命名方式一般采用网络域名的反向输出，如 com.company.test/com.company.entity。</p><h2 id="_9、方法重写" tabindex="-1"><a class="header-anchor" href="#_9、方法重写"><span>9、方法重写</span></a></h2><p>子类在继承父类方法的基础上，对父类方法重新定义并覆盖的操作叫做方法重写。</p><p><strong>构造方法不能被重新</strong>，方法重写的规则：</p><p>1、父子类的方法名相同。</p><p>2、父子类的方法参数列表相同。</p><p>3、子类方法的返回值与父类方法返回值<strong>类型相同或者是其子类</strong>。</p><p>4、子类方法的<strong>访问权限不能小于父类</strong>。</p><h2 id="_10、方法重写-vs-方法重载" tabindex="-1"><a class="header-anchor" href="#_10、方法重写-vs-方法重载"><span>10、方法重写 VS 方法重载</span></a></h2><p>位置：方法重写在子类中对父类方法进行重写，方法重载是在同一个类中。</p><p>方法名：方法重写相同，方法重载相同。</p><p>参数列表：方法重写相同，方法重载不同。</p><p>返回值：方法重写相同或是其子类，方法重载没有要求。</p><p>访问权限：方法重写不能小于父类，方法重载没有要求。</p><h2 id="_11、多态" tabindex="-1"><a class="header-anchor" href="#_11、多态"><span>11、多态</span></a></h2><p>一个事物具有多种表现形态，在 Java 程序中，定义一个方法，在具体的生成环境中根据不同的需求呈现不同的业务逻辑，多态的前提是继承。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memeber</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//子类一</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrdinaryMember</span> <span class="token keyword">extends</span> <span class="token class-name">Memeber</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通会员买书打9折&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//子类二 </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperMember</span> <span class="token keyword">extends</span> <span class="token class-name">Memeber</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;超级会员买书打6折&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cashier</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Memeber</span> memeber<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Memeber</span> <span class="token function">getMemeber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> memeber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemeber</span><span class="token punctuation">(</span><span class="token class-name">Memeber</span> memeber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>memeber <span class="token operator">=</span> memeber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">settlement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>memeber<span class="token punctuation">.</span><span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrdinaryMember</span> ordinaryMember <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrdinaryMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SuperMember</span> superMember <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cashier</span> cashier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cashier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cashier<span class="token punctuation">.</span><span class="token function">setMemeber</span><span class="token punctuation">(</span>superMember<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cashier<span class="token punctuation">.</span><span class="token function">settlement</span><span class="token punctuation">(</span>ordinaryMember<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多态的具体使用有两种形式：</p><p>1、定义方法时<strong>形参类型为父类</strong>，实际调用方法时传入<strong>子类类型的参数</strong>。</p><p>2、定义方法时<strong>返回值类型为父类</strong>，实际调用方法时<strong>返回子类对象</strong>。</p><p>以上两种形式的基本原理都是<strong>父类引用可以指向子类对象</strong>。</p><h2 id="_11、抽象方法和抽象类" tabindex="-1"><a class="header-anchor" href="#_11、抽象方法和抽象类"><span>11、抽象方法和抽象类</span></a></h2><p>如果一个方法只有方法的声明而没有具体的方法实现，这个方法就叫做抽象方法，Java 中的抽象方法需要使用 abstract 关键字来修饰。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦类中定义了抽象方法，则该类也必须声明为抽象类，需要在类定义处添加 abstract 关键字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象类与普通类的区别是抽象类不能被实例化，抽象方法与普通方法的区别是抽象方法没有方法体。</p><p>抽象类中可以没有抽象方法，但是包含了抽象方法的类必须定义为抽象类。即我们可以在抽象类中定义普通方法，但是在普通类中不能定义抽象方法。</p><p>如果父类是抽象类，一旦子类继承了该抽象父类，则子类必须对父类的抽象方法进行重写，否则程序报错。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>du<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperMember</span> <span class="token keyword">extends</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;超级会员买书打6折&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子类也是抽象类，则可以不用重写父类的抽象方法。</p><h2 id="_12、接口" tabindex="-1"><a class="header-anchor" href="#_12、接口"><span>12、接口</span></a></h2><ul><li>什么是接口？</li></ul><p>接口是由抽象类衍生出来的一个概念，并由此产生了一种编程方式：面向接口编程。</p><p>面向接口编程就是将程序中的业务模块进行分离，以接口的形式去对接不同的业务模块。</p><p>面向接口编程的优点：当用户需求变更时，只需要切换不同的实现类，而不需要修改串联模块的接口，减少对系统的影响。</p><p>1、能够最大限度实现解耦合，降低程序的耦合性。</p><p>2、使程序易于扩展。</p><p>3、有利于程序的后期维护。</p><ul><li>如何使用接口</li></ul><p>接口在 Java 中时独立存在的一种结构，和类相似，我们需要创建一个接口文件，Java 中用 class 关键字来标识类，用 interface 来标识接口，基本语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>
    <span class="token keyword">public</span> 返回值 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>接口其实就是一个抽象类，极度抽象的抽象类。</strong></p><p>抽象类：一个类中一旦存在没有具体实现的抽象方法时，那么该类就必须定义为抽象类，同时抽象类允许存在非抽象方法。</p><p>但是接口完全不同，接口中不能存在非抽象方法，接口中必须全部是抽象方法。</p><p>因为接口中必须全部都是抽象方法，所以修饰抽象方法的关键字 abstract 可以省略。</p><p>接口中允许定义成员变量，但是有如下要求：</p><p>1、不能定义 private 和 protected 修饰的成员变量，只能定义<strong>public和默认访问</strong>权限修饰符修饰的成员变量。</p><p>2、接口中的成员变量在定义时就必须完成初始化。</p><p>3、接口中的成员变量都是静态常量，即可以直接通过接口访问，同时值不能被修改。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>du<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token constant">ID</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用接口时，不能直接实例化接口对象，而必须实例化其实现类对象，实现类本身就是一个普通的 Java 类，创建实现类的代码如下所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>du<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO Auto-generated method stub</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 implements 关键字来指定实现类具体要实现的接口，在实现类的内部需要对接口的所有抽象方法进行实现，同时要求<strong>访问权限修饰符、返回值类型、方法名和参数列表</strong>必须完全一致。</p><p>接口和继承，Java 只支持单继承，但是接口可以多实现（一个实现类可以同时实现多个接口）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//接口一</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token constant">ID</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//接口二</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//继承两个接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span><span class="token punctuation">,</span><span class="token class-name">MyInterface2</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;实现了跑步的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO Auto-generated method stub</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;实现了飞行的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyInterfaceImpl</span> myInterfaceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterfaceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInterfaceImpl<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInterfaceImpl<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13、枚举" tabindex="-1"><a class="header-anchor" href="#_13、枚举"><span>13、枚举</span></a></h2><p>枚举 Enum，是一种有确定值区间的数据类型，本质上就是一个类，具有简洁、安全、方便等特点。</p><p>枚举的值被约束到了一个特定的范围内，只能从这个范围以内取值。</p><p>为什么要有枚举？</p><p>因为在描述某些对象的属性时，该属性的值不能随便定义，必须在某个特定的区间内取值。</p><p>出于对数据的安全性考虑，类似这种有特定取值范围的数据我们就可以使用枚举来描述。</p><p>枚举指由一组常量组成的类型，指定一个取值区间，我们只能从该区间中取值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Week</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">MONDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">TUESDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">WEDNSDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">THURSDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">FRIDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">SATURDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> <span class="token constant">SUNDAY</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> $<span class="token constant">VALUES</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;MONDAY&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;TUESDAY&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">WEDNSDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;WEDNSDAY&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">THURSDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;THURSDAY&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;FRIDAY&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">SATURDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;SATURDAY&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">&quot;SUNDAY&quot;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token constant">VALUES</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
            <span class="token constant">MONDAY</span><span class="token punctuation">,</span><span class="token constant">TUESDAY</span><span class="token punctuation">,</span><span class="token constant">WEDNSDAY</span><span class="token punctuation">,</span><span class="token constant">THURSDAY</span><span class="token punctuation">,</span><span class="token constant">FRIDAY</span><span class="token punctuation">,</span><span class="token constant">SATURDAY</span><span class="token punctuation">,</span><span class="token constant">SUNDAY</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Week</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> $<span class="token constant">VALUES</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Week</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14、内部类" tabindex="-1"><a class="header-anchor" href="#_14、内部类"><span>14、内部类</span></a></h2><ol><li>成员内部类。</li><li>局部内部类。</li><li>匿名内部类</li><li>静态内部类</li></ol>`,143),c=[e];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","object.html.vue"]]),r=JSON.parse('{"path":"/code/java/object.html","title":"面向对象","lang":"zh-CN","frontmatter":{"order":5,"title":"面向对象","date":"2021-03-10T00:00:00.000Z","category":"Java","tag":"Java","timeline":true,"article":true,"description":"面向对象程序 Java 是一种面向对象编程（OOP）语言，其核心思想是通过对象和类来组织程序代码。面向对象编程具有四个主要特性：封装、继承、多态和抽象。 1、面向对象 面向对象编程思想：将程序模块化的思想。 什么是面向对象？ 面向对象编程思想诞生之前，程序开发采用的是面向过程的结构化编程方式，是一种面向功能划分的软件结构。 最小粒度细化到方法这一层。 ...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/java/object.html"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象程序 Java 是一种面向对象编程（OOP）语言，其核心思想是通过对象和类来组织程序代码。面向对象编程具有四个主要特性：封装、继承、多态和抽象。 1、面向对象 面向对象编程思想：将程序模块化的思想。 什么是面向对象？ 面向对象编程思想诞生之前，程序开发采用的是面向过程的结构化编程方式，是一种面向功能划分的软件结构。 最小粒度细化到方法这一层。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T07:12:59.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-27T07:12:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-27T07:12:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、面向对象","slug":"_1、面向对象","link":"#_1、面向对象","children":[]},{"level":2,"title":"2、定义类","slug":"_2、定义类","link":"#_2、定义类","children":[]},{"level":2,"title":"3、构造函数、构造方法、构造器","slug":"_3、构造函数、构造方法、构造器","link":"#_3、构造函数、构造方法、构造器","children":[]},{"level":2,"title":"4、this 关键字","slug":"_4、this-关键字","link":"#_4、this-关键字","children":[]},{"level":2,"title":"5、成员变量和局部变量","slug":"_5、成员变量和局部变量","link":"#_5、成员变量和局部变量","children":[]},{"level":2,"title":"6、封装","slug":"_6、封装","link":"#_6、封装","children":[]},{"level":2,"title":"7、static","slug":"_7、static","link":"#_7、static","children":[]},{"level":2,"title":"8、继承","slug":"_8、继承","link":"#_8、继承","children":[{"level":4,"title":"8.1、子类访问父类","slug":"_8-1、子类访问父类","link":"#_8-1、子类访问父类","children":[]},{"level":4,"title":"8.2、子类的访问权限","slug":"_8-2、子类的访问权限","link":"#_8-2、子类的访问权限","children":[]}]},{"level":2,"title":"9、方法重写","slug":"_9、方法重写","link":"#_9、方法重写","children":[]},{"level":2,"title":"10、方法重写 VS 方法重载","slug":"_10、方法重写-vs-方法重载","link":"#_10、方法重写-vs-方法重载","children":[]},{"level":2,"title":"11、多态","slug":"_11、多态","link":"#_11、多态","children":[]},{"level":2,"title":"11、抽象方法和抽象类","slug":"_11、抽象方法和抽象类","link":"#_11、抽象方法和抽象类","children":[]},{"level":2,"title":"12、接口","slug":"_12、接口","link":"#_12、接口","children":[]},{"level":2,"title":"13、枚举","slug":"_13、枚举","link":"#_13、枚举","children":[]},{"level":2,"title":"14、内部类","slug":"_14、内部类","link":"#_14、内部类","children":[]}],"git":{"createdTime":1716652325000,"updatedTime":1716793979000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":3}]},"readingTime":{"minutes":14.56,"words":4367},"filePathRelative":"code/java/object.md","localizedDate":"2021年3月10日","excerpt":"\\n<p>Java 是一种面向对象编程（OOP）语言，其核心思想是通过对象和类来组织程序代码。面向对象编程具有四个主要特性：封装、继承、多态和抽象。</p>","autoDesc":true}');export{d as comp,r as data};
