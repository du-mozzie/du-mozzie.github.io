import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,b as n,d as c,e as i,h as a}from"./app-EhnmnEeq.js";const l={},r=a(`<p><strong>HTTP决策树</strong></p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/HTTP决策树.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token annotation punctuation">@Slf4j</span> <span class="token comment">/*日志处理*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
	 *     处理自定义业务异常
	 *     注意：我们规定所有网络异常使用HttpStatus码
	 *          如果是业务状态码，最好作用自定义的异常code
	 *          因此这里我们响应码用200，响应信息里的code用来放业务异常码
	 * \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token keyword">@param</span> <span class="token parameter">exception</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BizException</span></span><span class="token punctuation">}</span> 自定义业务异常
	 * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Resp</span></span><span class="token punctuation">}</span>
	 */</span>
	<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BizException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">BizException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">printException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token class-name">Resp</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@RestControllerAdvice</strong></p><p>定义该类为全局异常处理类。</p><p><strong>@ExceptionHandler</strong></p><p>定义该方法为异常处理方法。value 的值为需要处理的异常类的 class 文件。在例子中，方法传入两个参数。一个是对应的 Exception 异常类，一个是 HttpServletRequest 类。当然，除了这两种参数，还支持传入一些其他参数。详见文档</p>`,7),u={href:"https://link.segmentfault.com/?url=https%3A%2F%2Fdocs.spring.io%2Fspring%2Fdocs%2Fcurrent%2Fjavadoc-api%2Forg%2Fspringframework%2Fweb%2Fbind%2Fannotation%2FExceptionHandler.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>这样，就可以对不同的异常进行统一处理了。通常，为了使 controller 中不再使用任何 try/catch，也可以在 GlobalExceptionHandler 中对 Exception 做统一处理。这样其他没有用 @ExceptionHandler 配置的异常就都会统一被处理。</p><blockquote><p>在业务中遇到对应的异常直接抛出就行</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;3000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;账户密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function m(k,g){const s=e("ExternalLinkIcon");return o(),p("div",null,[r,n("p",null,[n("a",u,[c("Spring ExceptionHandler文档"),i(s)])]),d])}const h=t(l,[["render",m],["__file","global-exception-capture.html.vue"]]),x=JSON.parse('{"path":"/code/spring/boot/global-exception-capture.html","title":"全局异常捕获","lang":"zh-CN","frontmatter":{"order":9,"title":"全局异常捕获","date":"2021-10-16T00:00:00.000Z","category":["Spring Boot"],"tag":["Spring Boot"],"timeline":true,"article":true,"description":"HTTP决策树 @RestControllerAdvice 定义该类为全局异常处理类。 @ExceptionHandler 定义该方法为异常处理方法。value 的值为需要处理的异常类的 class 文件。在例子中，方法传入两个参数。一个是对应的 Exception 异常类，一个是 HttpServletRequest 类。当然，除了这两种参数，还支持...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/spring/boot/global-exception-capture.html"}],["meta",{"property":"og:title","content":"全局异常捕获"}],["meta",{"property":"og:description","content":"HTTP决策树 @RestControllerAdvice 定义该类为全局异常处理类。 @ExceptionHandler 定义该方法为异常处理方法。value 的值为需要处理的异常类的 class 文件。在例子中，方法传入两个参数。一个是对应的 Exception 异常类，一个是 HttpServletRequest 类。当然，除了这两种参数，还支持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/HTTP决策树.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:54:15.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2021-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"全局异常捕获\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/HTTP决策树.webp\\"],\\"datePublished\\":\\"2021-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1721987655000,"updatedTime":1721987655000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"code/spring/boot/global-exception-capture.md","localizedDate":"2021年10月16日","excerpt":"<p><strong>HTTP决策树</strong></p>","autoDesc":true}');export{h as comp,x as data};
