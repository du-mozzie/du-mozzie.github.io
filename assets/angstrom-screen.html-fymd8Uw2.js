import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as o,b as n,d as p,e as c,h as i}from"./app-CMGtM5YA.js";const r={},l=n("h1",{id:"埃式筛",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#埃式筛"},[n("span",null,"埃式筛")])],-1),u={href:"https://leetcode-cn.com/problems/count-primes/",target:"_blank",rel:"noopener noreferrer"},d=i(`<p>通过标记0&lt;n中的合数来减少遍历次数，求出0&lt;n的素数个数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function k(m,v){const a=t("ExternalLinkIcon");return e(),o("div",null,[l,n("p",null,[n("a",u,[p("leetcode 204 计算质数"),c(a)])]),d])}const g=s(r,[["render",k],["__file","angstrom-screen.html.vue"]]),y=JSON.parse('{"path":"/code/data-structure-and-algorithms/algorithms/angstrom-screen.html","title":"埃式筛","lang":"zh-CN","frontmatter":{"order":4,"title":"埃式筛","date":"2021-01-03T00:00:00.000Z","category":"算法","tag":"算法","timeline":true,"article":true,"description":"埃式筛 leetcode 204 计算质数 通过标记0<n中的合数来减少遍历次数，求出0<n的素数个数","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/data-structure-and-algorithms/algorithms/angstrom-screen.html"}],["meta",{"property":"og:title","content":"埃式筛"}],["meta",{"property":"og:description","content":"埃式筛 leetcode 204 计算质数 通过标记0<n中的合数来减少遍历次数，求出0<n的素数个数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-26T03:44:22.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2021-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-26T03:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"埃式筛\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-26T03:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1716652325000,"updatedTime":1716695062000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":0.35,"words":106},"filePathRelative":"code/data-structure-and-algorithms/algorithms/angstrom-screen.md","localizedDate":"2021年1月3日","excerpt":"\\n<p><a href=\\"https://leetcode-cn.com/problems/count-primes/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">leetcode 204 计算质数</a></p>","autoDesc":true}');export{g as comp,y as data};
