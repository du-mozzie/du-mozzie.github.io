import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,h as t}from"./app-CzyYKcP4.js";const e={},p=t(`<h2 id="validated参数合法性" tabindex="-1"><a class="header-anchor" href="#validated参数合法性"><span>@Validated参数合法性</span></a></h2><ol><li><p>在实体类添加校验规则</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//所属包</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>限制</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>限制只能为null</td></tr><tr><td>@NotNull</td><td>限制必须不为null</td></tr><tr><td>@AssertFalse</td><td>限制必须为false</td></tr><tr><td>@AssertTrue</td><td>限制必须为true</td></tr><tr><td>@DecimalMax(value)</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@DecimalMin(value)</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@Digits(integer,fraction)</td><td>限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td>@Future</td><td>限制必须是一个将来的日期</td></tr><tr><td>@Past</td><td>限制必须是一个过去的日期</td></tr><tr><td>@Max(value)</td><td>限制必须为一个不大于指定值的数字</td></tr><tr><td>@Min(value)</td><td>限制必须为一个不小于指定值的数字</td></tr><tr><td>@Pattern(value)</td><td>限制必须符合指定的正则表达式</td></tr><tr><td>@Size(max,min)</td><td>限制字符长度必须在min到max之间</td></tr><tr><td>@Past</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@NotEmpty</td><td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@NotBlank</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td></tr><tr><td>@Email</td><td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td></tr></tbody></table></li><li><p>在controller中开启</p><p>在接受参数前面加上 <code>@Validated</code> 注解, 对象中的 <code>@NotNull、@Max</code> 等注解才会生效, 不加的话是无效的</p></li></ol><p>bindingResult.getFieldError.getDefaultMessage()⽤于获取相应字段上校验器添加的message中的内容，如：@Min注解中message属性的</p><p>内容（注: 通常不在这⾥处理异常，由统⼀的exceptioin全局异常处理）</p><h2 id="自定义校验器" tabindex="-1"><a class="header-anchor" href="#自定义校验器"><span>自定义校验器</span></a></h2><ol><li><p>编写一个自定义的校验注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE_USE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">PhoneValidatorForString</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 自定义的校验规则</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;手机号格式不正确&quot;</span><span class="token punctuation">;</span> 

    <span class="token class-name">Class</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写一个自定义的校验规则</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneValidatorForString</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现initialize方法可以获取到标注的数据</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 手机号正则</span>
        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\\\d{8}$&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>如果一个校验器需要校验多种类型的时候，我们在约束条件添加多个校验规则就行了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">PhoneValidatorForString</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> xxxxxx<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="校验组" tabindex="-1"><a class="header-anchor" href="#校验组"><span>校验组</span></a></h2><ol><li><p>自定义一个校验组（声明一个接口）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SaveGroup</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在需要校验的属性上添加校验分组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Phone</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SaveGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20220621224136086.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在controller方法上添加校验分组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SaveGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token class-name">SmsSendCodeReq</span> smsSendCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> code <span class="token operator">=</span> smsService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>smsSendCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果还有其他属性没有标注分组信息，默认是不进行校验的，要校验就需要添加分组</p></li></ol><p><mark>@Validated、@Valid区别</mark></p><ol><li><p>所在包不同</p><ul><li>@Valid 在 import javax.validation.Valid;</li><li>@Validated 在 import org.springframework.validation.annotation.Validated;</li></ul></li><li><p>支持分组校验</p><ul><li>@Valid 不支持分组校验</li><li>@Validated 支持分组校验</li></ul></li><li><p>嵌套校验</p><ul><li>@Valid 如果一个属性是一个类，这个类下面又有属性需要校验，使用@Valid可以进行校验</li><li>@Validated 如果一个属性是一个类，这个类下面又有属性需要校验，使用@Validated不可以进行校验</li></ul></li><li><p>注解地方</p><ul><li>Valid 可以用在方法、构造函数、方法参数和成员属性（字段）上</li><li>可以用在类型、方法和方法参数上。但是不能用在成员属性（字段）上</li></ul><p>能不能用在成员属性上影响了其嵌套校验功能</p></li></ol>`,12),o=[p];function l(i,c){return n(),s("div",null,o)}const r=a(e,[["render",l],["__file","validated.html.vue"]]),k=JSON.parse('{"path":"/code/spring/boot/validated.html","title":"校验器","lang":"zh-CN","frontmatter":{"order":6,"title":"校验器","date":"2021-10-14T00:00:00.000Z","category":["Spring Boot"],"tag":["Spring Boot"],"timeline":true,"article":true,"description":"@Validated参数合法性 在实体类添加校验规则 在controller中开启 在接受参数前面加上 @Validated 注解, 对象中的 @NotNull、@Max 等注解才会生效, 不加的话是无效的 bindingResult.getFieldError.getDefaultMessage()⽤于获取相应字段上校验器添加的message中的内容...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/spring/boot/validated.html"}],["meta",{"property":"og:title","content":"校验器"}],["meta",{"property":"og:description","content":"@Validated参数合法性 在实体类添加校验规则 在controller中开启 在接受参数前面加上 @Validated 注解, 对象中的 @NotNull、@Max 等注解才会生效, 不加的话是无效的 bindingResult.getFieldError.getDefaultMessage()⽤于获取相应字段上校验器添加的message中的内容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20220621224136086.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:54:15.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2021-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"校验器\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20220621224136086.png\\"],\\"datePublished\\":\\"2021-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"@Validated参数合法性","slug":"validated参数合法性","link":"#validated参数合法性","children":[]},{"level":2,"title":"自定义校验器","slug":"自定义校验器","link":"#自定义校验器","children":[]},{"level":2,"title":"校验组","slug":"校验组","link":"#校验组","children":[]}],"git":{"createdTime":1721987655000,"updatedTime":1721987655000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":1}]},"readingTime":{"minutes":3.18,"words":953},"filePathRelative":"code/spring/boot/validated.md","localizedDate":"2021年10月14日","excerpt":"<h2>@Validated参数合法性</h2>","autoDesc":true}');export{r as comp,k as data};
