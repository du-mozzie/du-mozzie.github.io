import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as o,b as e,d as n,e as t,h as c}from"./app-DPmQO9eV.js";const r={},d=e("p",null,"公司中一些Git使用规范说明，基于特性的分支工作流。",-1),p={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/u4lt3ucIeMZT-c1zAj7YAg",target:"_blank",rel:"noopener noreferrer"},m=c(`<h2 id="git分支管理" tabindex="-1"><a class="header-anchor" href="#git分支管理"><span>Git分支管理</span></a></h2><p>通常采用<strong>四类分支</strong>，对应不同环境：</p><table><thead><tr><th><strong>支类型</strong></th><th><strong>命名示例</strong></th><th><strong>用途</strong></th><th><strong>稳定性要求</strong></th></tr></thead><tbody><tr><td><strong>生产分支</strong></td><td><code>release</code> 或 <code>master</code></td><td>线上运行代码，仅接受通过测试的代码，禁止直接修改。</td><td>高（与生产一致）</td></tr><tr><td><strong>预发分支</strong></td><td><code>uat</code></td><td>模拟生产环境，用于最终验收和性能测试。</td><td>较高</td></tr><tr><td><strong>测试分支</strong></td><td><code>test</code></td><td>QA 测试环境，开发人员提交代码后部署到此分支。</td><td>中等</td></tr><tr><td><strong>开发分支</strong></td><td><code>dev</code></td><td>集成各特性分支，日常开发联调使用，可能包含未测试代码。</td><td>低（不稳定）</td></tr></tbody></table><p><strong>注意</strong>：小公司可能简化到仅 <code>dev</code> + <code>master</code>，但大厂通过环境隔离规避代码污染风险</p><h2 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程"><span>开发流程</span></a></h2><ol><li><p><strong>需求启动</strong></p><ul><li>评审需求 → 排期 → 从 <code>release</code> 或 <code>uat</code> 拉取<strong>特性分支</strong>（如 <code>feat-需求ID-开发者</code>）。</li><li><strong>分支命名规范</strong>： <ul><li><code>feat</code>: 新功能 · <code>fix</code>: Bug修复 · <code>refactor</code>: 重构 · <code>chore</code>: 工具链调整。</li></ul></li></ul></li><li><p><strong>本地开发</strong></p><ul><li>在特性分支编码 → 自测（冒烟测试） → 提交格式：<code>&lt;类型&gt;: &lt;描述&gt;</code>（例：<code>fix: 禅道#3387-修复重复请求</code>）。</li><li><strong>关键原则</strong>： <ul><li>⚠️ 禁止合并 <code>dev/test/uat</code> 到本地分支（避免引入未验证代码）。</li><li>单分支单功能：一个分支只开发一个需求/Bug，便于独立上线。</li></ul></li></ul></li><li><p><strong>代码合并与提测</strong></p><ul><li><p><strong>方式1（推荐）</strong>：线上合并（GitLab/GitHub Merge Request）</p><ul><li>推送特性分支到远程 → 发起 MR 到 <code>test</code> 分支 → Code Review → 解决冲突 → 合并部署测试环境。</li><li><strong>优势</strong>：支持代码审查、冲突集中处理、操作可追溯。</li></ul></li><li><p><strong>方式2（谨慎使用）</strong>：本地合并，需要有对应远程分支的 <strong>push</strong> 权限</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 没有对应远程分支代码</span>
<span class="token function">git</span> fetch origin test:test <span class="token comment"># 拉取远程分支代码到本地分支test（本地没有test会创建）</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">test</span> <span class="token comment"># 切换本地分支到test</span>
<span class="token function">git</span> merge feat-0820-dyj <span class="token comment"># 合并开发的本地分支到test分支</span>
<span class="token function">git</span> push origin <span class="token builtin class-name">test</span> <span class="token comment"># 提交本地分支到远程test分支</span>

<span class="token comment"># 有对应远程分支代码</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">test</span> <span class="token comment"># 切换到test分支</span>
<span class="token function">git</span> pull origin <span class="token builtin class-name">test</span>  <span class="token comment"># 更新test分支</span>
<span class="token function">git</span> merge feat-0820-dyj   <span class="token comment"># 合并特性分支（本地解决冲突）</span>
<span class="token function">git</span> push origin <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>测试与上线</strong></p><ul><li>测试环境 → 修复 Bug → 预发环境（UAT）→ <strong>二次验证</strong>（Bug 修复需重新走测试流程）→ 产品验收 → 合并到 <code>release</code> 部署生产。</li><li>预发环境修 Bug 后必须回归测试：确保预发环境稳定性，避免污染生产。</li></ul></li><li><p><strong>分支清理</strong></p><ul><li>需求上线后删除特性分支：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> feat-xxx   <span class="token comment"># 删除本地分支</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> feat-xxx  <span class="token comment"># 删除远程分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>具体Git命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 切换到本地生产分支</span>
<span class="token function">git</span> checkout release
<span class="token comment"># 拉取远程生产代码</span>
<span class="token function">git</span> pull origin release
<span class="token comment"># 基于生产分支代码创建一个新的分支（关于某个需要）</span>
<span class="token comment"># 推荐命名规范 分支类型-需求日期/需求号-开发人姓名</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feat-0820-dyj
<span class="token comment"># 开发完成 提交代码</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;feat(login): 登录&quot;</span>  <span class="token comment"># 消息规范下面有讲</span>
<span class="token comment"># 提交到远程分支</span>
两种方式详细见开发流程

<span class="token comment"># 删除本地分支</span>
<span class="token function">git</span> brach <span class="token parameter variable">-d</span> feat-0820-dyj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commit-message规范" tabindex="-1"><a class="header-anchor" href="#commit-message规范"><span>Commit Message规范</span></a></h2><p>常用的提交信息格式是 Angular 规范，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;类型&gt;(&lt;作用域&gt;): &lt;主题&gt;
&lt;空行&gt;
&lt;描述&gt;
&lt;空行&gt;
&lt;脚注&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h4><p>类型表示这次提交的变更类型，常见的有：</p><ul><li>feat：新功能（feature）</li><li>fix：修复 bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码逻辑的变动，比如空格、分号等）</li><li>refactor：重构（既不是新增功能，也不是修复 bug，只是对代码进行重构）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h4 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h4><p>作用域表示这次变更涉及的模块或功能，比如 login、payment、api 等。作用域不是必须的，但加上可以让提交信息更明确。</p><h4 id="主题" tabindex="-1"><a class="header-anchor" href="#主题"><span>主题</span></a></h4><p>主题是对本次变更的简短描述，要简洁明了，不能太长，一般不超过 50 个字符。</p><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h4><p>描述是对本次变更的详细说明，可以包括变更的原因、解决的问题等。</p><h4 id="脚注" tabindex="-1"><a class="header-anchor" href="#脚注"><span>脚注</span></a></h4><p>脚注可以包括相关的 Issue 号、链接等，方便追溯问题。</p><p>比如一个标准的提交信息可能是这样的：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>fix(login): 修复用户名密码加密逻辑

之前用户名密码在传输过程中没有进行加密，存在安全隐患。本次变更对用户名密码进行了 AES 加密处理，确保数据安全。

Closes #123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的提交信息清晰地说明了这次提交是修复了登录模块的用户名密码加密逻辑，详细描述了问题和解决方案，还关联了相关的 Issue，方便后续查看。</p><h2 id="高频问题处理" tabindex="-1"><a class="header-anchor" href="#高频问题处理"><span>高频问题处理</span></a></h2><ol><li><p><strong>错误合并到生产分支，本来要提交到 uat 分支，结果提交到 release 分支了怎么解决</strong></p><ul><li>回退步骤：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout release              <span class="token comment"># 切换到生产分支</span>
<span class="token function">git</span> log <span class="token parameter variable">--merges</span>                  <span class="token comment"># 查找误合提交的 commit ID</span>
<span class="token function">git</span> revert <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token operator">&lt;</span>commit-id<span class="token operator">&gt;</span>       <span class="token comment"># 撤销合并</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin release        <span class="token comment"># 强制推送（覆盖远程）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>注意</strong>：<code>revert</code> 生成新提交保留记录，比 <code>reset</code> 更安全。</li></ul></li><li><p><strong>临时切换任务（未提交代码）</strong></p><ul><li>暂存当前修改：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> stash save <span class="token string">&quot;临时保存描述&quot;</span>    <span class="token comment"># 存储工作区，也可以不写提交信息 git stash</span>
<span class="token function">git</span> checkout feat-other         <span class="token comment"># 切换分支修复紧急需求</span>
<span class="token function">git</span> checkout feat-original      <span class="token comment"># 切回原分支</span>
<span class="token function">git</span> stash pop                   <span class="token comment"># 恢复暂存代码</span>

<span class="token comment"># 不确定之前的分支，如何查看</span>
<span class="token function">git</span> stash list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="协作模式-git-workflow" tabindex="-1"><a class="header-anchor" href="#协作模式-git-workflow"><span>协作模式（Git Workflow）</span></a></h2><p>大厂常用两种模型：</p><ol><li><strong>GitFlow</strong>： <ul><li>分支角色：<code>master</code>（生产） / <code>develop</code>（开发） / <code>feature</code>（特性） / <code>release</code>（预发布） / <code>hotfix</code>（热修复）。</li><li>适合复杂项目，但流程较重。</li></ul></li><li><strong>Forking 工作流</strong>： <ul><li>开发者 Fork 主仓库 → 提交到个人仓库 → PR 合并到主库。</li><li>适合开源项目或权限严格管控的场景（如 GitHub）。</li></ul></li></ol><h2 id="总结-核心原则" tabindex="-1"><a class="header-anchor" href="#总结-核心原则"><span>总结：核心原则</span></a></h2><ul><li><strong>分支隔离</strong>：环境分离（dev/test/uat/release） + 功能隔离（单分支单需求）。</li><li><strong>合并安全</strong>：优先线上 MR/PR，避免本地合并冲突。</li><li><strong>追溯性</strong>：Commit 信息规范 + 分支清理机制。</li><li><strong>预发保护</strong>：UAT 环境修 Bug 后必须回归测试，严防线上事故。</li></ul>`,32),g={href:"https://www.ruanyifeng.com/blog/2015/12/git-workflow.html",target:"_blank",rel:"noopener noreferrer"};function h(v,b){const s=i("ExternalLinkIcon");return l(),o("div",null,[d,e("p",null,[e("a",p,[n("Git可视化学习网站"),t(s)])]),e("p",null,[e("a",u,[n("一些好的Git使用case"),t(s)])]),m,e("blockquote",null,[e("p",null,[n("流程虽严格，但能显著降低协作风险。实际执行中，团队会结合 CI/CD 自动化测试和部署，进一步提升效率。参考案例可查看 "),e("a",g,[n("阮一峰 Git 工作流程"),t(s)]),n(" 。")])])])}const x=a(r,[["render",h],["__file","standard.html.vue"]]),_=JSON.parse('{"path":"/code/notes/git/standard.html","title":"Git使用规范","lang":"zh-CN","frontmatter":{"order":3,"title":"Git使用规范","date":"2021-08-20T00:00:00.000Z","category":["杂记","Git"],"tag":["杂记","Git"],"timeline":true,"article":true,"description":"公司中一些Git使用规范说明，基于特性的分支工作流。 Git可视化学习网站 一些好的Git使用case Git分支管理 通常采用四类分支，对应不同环境： 注意：小公司可能简化到仅 dev + master，但大厂通过环境隔离规避代码污染风险 开发流程 需求启动 评审需求 → 排期 → 从 release 或 uat 拉取特性分支（如 feat-需求ID...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/notes/git/standard.html"}],["meta",{"property":"og:title","content":"Git使用规范"}],["meta",{"property":"og:description","content":"公司中一些Git使用规范说明，基于特性的分支工作流。 Git可视化学习网站 一些好的Git使用case Git分支管理 通常采用四类分支，对应不同环境： 注意：小公司可能简化到仅 dev + master，但大厂通过环境隔离规避代码污染风险 开发流程 需求启动 评审需求 → 排期 → 从 release 或 uat 拉取特性分支（如 feat-需求ID..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-30T09:03:32.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"杂记"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2021-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-30T09:03:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git使用规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-30T09:03:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Git分支管理","slug":"git分支管理","link":"#git分支管理","children":[]},{"level":2,"title":"开发流程","slug":"开发流程","link":"#开发流程","children":[]},{"level":2,"title":"Commit Message规范","slug":"commit-message规范","link":"#commit-message规范","children":[{"level":4,"title":"类型","slug":"类型","link":"#类型","children":[]},{"level":4,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":4,"title":"主题","slug":"主题","link":"#主题","children":[]},{"level":4,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":4,"title":"脚注","slug":"脚注","link":"#脚注","children":[]}]},{"level":2,"title":"高频问题处理","slug":"高频问题处理","link":"#高频问题处理","children":[]},{"level":2,"title":"协作模式（Git Workflow）","slug":"协作模式-git-workflow","link":"#协作模式-git-workflow","children":[]},{"level":2,"title":"总结：核心原则","slug":"总结-核心原则","link":"#总结-核心原则","children":[]}],"git":{"createdTime":1748595812000,"updatedTime":1748595812000,"contributors":[{"name":"mozzie","email":"du.mozzie@outlook.com","commits":1}]},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"code/notes/git/standard.md","localizedDate":"2021年8月20日","excerpt":"<p>公司中一些Git使用规范说明，基于特性的分支工作流。</p>","autoDesc":true}');export{x as comp,_ as data};
