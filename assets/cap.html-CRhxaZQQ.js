import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,h as a}from"./app-D8JUQIaZ.js";const o={},l=a('<p>CAP理论与BASE理论介绍</p><h2 id="什么是cap" tabindex="-1"><a class="header-anchor" href="#什么是cap"><span>什么是CAP</span></a></h2><ul><li>C：Consistency 一致性：指强一致性，分布式系统中的所有节点在同一时刻具有同样的值、都是最新的数据副本，一致性保证了不管向哪台服务器写入数据，其他的服务器能实时同步数据。</li><li>A：Availability 可用性：部分结点宕机不影响整个集群对外提供服务，每次向未故障的节点发送请求，服务节点总能保证在有限的时间内处理完成并进行响应，从用户角度来看就是不会出现系统操作失败或者访问超时等问题，但是系统内部可能会出现网络延迟等问题。</li><li>P：Partition Tolerance 分区容错性：由于网络的问题错综复杂，如果某个节点因为网络等问题造成数据不一致，或者数据延迟很久才同步过来，虽然会影响部分节点数据的时效性，但是服务节点依然是可用的，分布式系统要能容忍这种情况的，也就是说，尽管网络上有部分消息丢失，但系统仍然可继续工作。</li></ul><p>​ 分布式系统中，CAP是无法同时满足的，只能满足CAP中的两种，因此在设计分布式架构时，必须做出取舍，而对于分布式系统，分区容忍性是基本要求，必须要满足，否则就失去了价值。因为是节点宕机和网络故障大概率事件，很难避免，而当出现这种情况时，不可能同时保持一致性和可用性，所以设计分布式系统，就是在一致性和可用性之间取一个平衡。</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20250124101032642.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那为什么说在P满足的情况下，为什么说CA不能同时满足呢？我们来通过假设看一看，如果CA同时满足会怎么样：</p><ol><li>假设现在要求满足C（一致性），那么就是说所有的节点在某一刻提供的数据都必须一致，我们知道在P的情况，是不可能保证的，要保证的话，就只能把其他节点全部干掉，比如禁止读写，那这其实就是和A是相悖的（某些节点虽然延迟，但是节点本身可用）</li><li>假设现在要求满足A（可用性），那么就是说只要节点本身没什么问题，就可以对外提供服务，哪怕有点数据延迟，很明显这肯定是和C相悖的。</li></ol><h2 id="一致性的类别" tabindex="-1"><a class="header-anchor" href="#一致性的类别"><span>一致性的类别</span></a></h2><p>CAP 是分布式事务处理的理论基础，在分布式事务的最终解决方案中一般选择牺牲一致性来换取可用性和分区容错性，但这里的 “牺牲一致性” 并不是完全放弃数据的一致性，而是放弃强一致性而换取弱一致性。一致性一般可以分为以下三种：</p><ol><li><p>强一致性：在任意时刻，所有节点中的数据是一样的，系统中的某个数据被成功更新后，后续任何对该数据的读取操作都将得到更新后的值。比如传统数据库的事务特性 ACID，就是追求强一致性模型。</p><blockquote><p>一个集群需要对外部提供强一致性，就务必会损耗可用性，只要集群内部某一台服务器的数据发生了改变，那么就需要等待集群内其他服务器的数据同步完成后，才能正常的对外提供服务。</p></blockquote></li><li><p>弱一致性：系统中的某个数据被更新后，后续对该数据的读取操作可能得到更新后的值，也可能是更改前的值，但即使过了不一致时间窗口后，后续对该数据的读取也不一定是最新值。</p></li><li><p>最终一致性：是弱一致性的特殊形式，虽然不保证在任意时刻任意节点上的同一份数据都是相同的，但经过一段时间后，所有服务节点间的数据最终会达到一致的状态</p><blockquote><p>弱一致性即使过了不一致时间窗口，后续的读取也不一定能保证一致，而最终一致性过了不一致窗口后，后续的读取一定保证一致。</p></blockquote></li></ol><h2 id="什么是-base-理论" tabindex="-1"><a class="header-anchor" href="#什么是-base-理论"><span>什么是 BASE 理论</span></a></h2><p>BASE 理论是指，Basically Available（基本可用）、Soft-state（ 软状态）、Eventual Consistency（最终一致性），是基于CAP定理演化而来，是对CAP中一致性和可用性权衡的结果。核心思想是即使无法做到强一致性，但每个业务根据自身的特点，采用适当的方式来使系统达到最终一致性。</p><ul><li>BA 基本可用：指分布式系统在出现故障的时候，允许损失部分可用性，保证核心可用。但不等价于不可用。比如：搜索引擎0.5秒返回查询结果，但由于故障，2秒响应查询结果；网页访问过大时，部分用户提供降级服务等。</li><li>软状态：软状态是指允许系统存在中间状态，并且该中间状态不会影响系统整体可用性，即允许系统在不同节点间副本同步的时候存在延时。</li><li>最终一致性：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态，不需要实时保证系统数据的强一致性。</li></ul><p>很多时候我们并不要求数据的强一致性，而 BASE 通过牺牲强一致性来获得更好的可用性，所以 BASE 理论的适用性更广泛，比如更适合面向的是大型高可用可扩展的分布式系统</p><blockquote><p>柔性事务和刚性事务：柔性事务满足BASE理论（基本可用，最终一致），刚性事务满足ACID理论。</p></blockquote>',15),r=[l];function c(p,n){return t(),i("div",null,r)}const d=e(o,[["render",c],["__file","cap.html.vue"]]),u=JSON.parse('{"path":"/code/distributed/base/cap.html","title":"CAP理论与BASE理论","lang":"zh-CN","frontmatter":{"order":1,"title":"CAP理论与BASE理论","date":"2025-01-11T00:00:00.000Z","category":["CAP","分布式"],"tag":["CAP","分布式"],"timeline":true,"article":true,"prev":"./","description":"CAP理论与BASE理论介绍 什么是CAP C：Consistency 一致性：指强一致性，分布式系统中的所有节点在同一时刻具有同样的值、都是最新的数据副本，一致性保证了不管向哪台服务器写入数据，其他的服务器能实时同步数据。 A：Availability 可用性：部分结点宕机不影响整个集群对外提供服务，每次向未故障的节点发送请求，服务节点总能保证在有限...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/distributed/base/cap.html"}],["meta",{"property":"og:title","content":"CAP理论与BASE理论"}],["meta",{"property":"og:description","content":"CAP理论与BASE理论介绍 什么是CAP C：Consistency 一致性：指强一致性，分布式系统中的所有节点在同一时刻具有同样的值、都是最新的数据副本，一致性保证了不管向哪台服务器写入数据，其他的服务器能实时同步数据。 A：Availability 可用性：部分结点宕机不影响整个集群对外提供服务，每次向未故障的节点发送请求，服务节点总能保证在有限..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20250124101032642.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-24T02:17:24.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"CAP"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:published_time","content":"2025-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-24T02:17:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CAP理论与BASE理论\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20250124101032642.png\\"],\\"datePublished\\":\\"2025-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-24T02:17:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"什么是CAP","slug":"什么是cap","link":"#什么是cap","children":[]},{"level":2,"title":"一致性的类别","slug":"一致性的类别","link":"#一致性的类别","children":[]},{"level":2,"title":"什么是 BASE 理论","slug":"什么是-base-理论","link":"#什么是-base-理论","children":[]}],"git":{"createdTime":1737685044000,"updatedTime":1737685044000,"contributors":[{"name":"mozzie","email":"du.mozzie@outlook.com","commits":1}]},"readingTime":{"minutes":5.2,"words":1559},"filePathRelative":"code/distributed/base/cap.md","localizedDate":"2025年1月11日","excerpt":"<p>CAP理论与BASE理论介绍</p>","autoDesc":true}');export{d as comp,u as data};
