import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,h as o}from"./app-CH4cb23F.js";const r={},i=o('<h1 id="动态规划-dp" tabindex="-1"><a class="header-anchor" href="#动态规划-dp"><span>动态规划(DP)</span></a></h1><p>滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p><p>算法核心：<mark>记住已经解决过的子问题的解</mark></p><p><strong>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解</strong></p><blockquote><p>记住求解的方式有两种 1、自顶向下的备忘录法 2、自底向上。</p></blockquote><p>​ 在求解问题中,对于每一步决策,列出各种可能的局部解,再依据某种判定条件，舍弃那些肯定不能得到最优解的局部解,在每一步都经过筛选,以每一步都是最优解来保证全局是最优解。</p><h2 id="树形dp套路" tabindex="-1"><a class="header-anchor" href="#树形dp套路"><span>树形DP套路</span></a></h2><ol><li>以某个节点X为头节点的子树中，分析答案有哪些可能性，并且这种分析是以X的左子树、X的右子树和X整棵树的角度来考虑可能性的</li><li>根据第一步的可能性分析，列出所有需要的信息</li><li>合并第二步的信息，对左树和右树提出同样的要求，并写出信息结构</li><li>设计递归函数，递归函数是处理以X为头节点的情况下的答案。 包括设计递归的basecase，默认直接得到左树和右树的所有信息，以及把可能性做整合，并且要返回第三步的信息结构这四个小步骤</li></ol><p>一般都要用到查表</p>',9),p=[i];function c(n,d){return e(),a("div",null,p)}const m=t(r,[["render",c],["__file","dp.html.vue"]]),h=JSON.parse('{"path":"/code/data-structure-and-algorithms/algorithms/dp.html","title":"动态规划","lang":"zh-CN","frontmatter":{"order":8,"title":"动态规划","date":"2021-01-07T00:00:00.000Z","category":"数据结构与算法","timeline":true,"article":true,"description":"动态规划(DP) 滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/data-structure-and-algorithms/algorithms/dp.html"}],["meta",{"property":"og:title","content":"动态规划"}],["meta",{"property":"og:description","content":"动态规划(DP) 滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:42:11.000Z"}],["meta",{"property":"article:author","content":"Du"}],["meta",{"property":"article:published_time","content":"2021-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:42:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态规划\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-08T06:42:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Du\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"树形DP套路","slug":"树形dp套路","link":"#树形dp套路","children":[]}],"git":{"createdTime":1715140098000,"updatedTime":1715150531000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"code/data-structure-and-algorithms/algorithms/dp.md","localizedDate":"2021年1月7日","excerpt":"\\n<p>滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p>","autoDesc":true}');export{m as comp,h as data};
