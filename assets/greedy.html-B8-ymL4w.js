import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as i,c as n,b as t,d as e,e as a,h as p}from"./app-7hSy6pf3.js";const c={},s=p('<h1 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h1><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p><blockquote><p>算法思路</p></blockquote><p>贪心算法一般按如下步骤进行：</p><ol><li><p>建立数学模型来描述问题。</p></li><li><p>把求解的问题分成若干个子问题。</p></li><li><p>对每个子问题求解，得到子问题的局部最优解。</p></li><li><p>把子问题的解局部最优解合成原来解问题的一个解。</p><p>​ 贪心算法是一种对某些求最优解问题的更简单、更迅速的设计技术。贪心算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，省去了为找最优解要穷尽所有可能而必须耗费的大量时间。贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择，就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解。虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪心算法不要回溯。</p></li></ol><blockquote><p>算法特性</p></blockquote><p>贪心算法可解决的问题通常大部分都有如下的特性：</p><ol><li>有一个以最优方式来解决的问题。为了构造问题的解决方案，有一个候选的对象的集合：比如不同面值的硬币。</li><li>随着算法的进行，将积累起其他两个集合：一个包含已经被考虑过并被选出的候选对象，另一个包含已经被考虑过但被丢弃的候选对象。</li><li>有一个函数来检查一个候选对象的集合是否提供了问题的解答。该函数不考虑此时的解决方法是否最优。</li><li>还有一个函数检查是否一个候选对象的集合是可行的，即是否可能往该集合上添加更多的候选对象以获得一个解。和上一个函数一样，此时不考虑解决方法的最优性。</li><li>选择函数可以指出哪一个剩余的候选对象最有希望构成问题的解。</li><li>最后，目标函数给出解的值。</li></ol><blockquote><p>使用条件</p></blockquote><p>利用贪心法求解的问题应具备如下2个特征。</p><p><strong>1、贪心选择性质</strong> 一个问题的整体最优解可通过一系列局部的最优解的选择达到，并且每次的选择可以依赖以前作出的选择，但不依赖于后面要作出的选择。这就是贪心选择性质。对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。</p><p><strong>2、最优子结构性质</strong></p><p>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用贪心法求解的关键所在。在实际应用中，至于什么问题具有什么样的贪心选择性质是不确定的，需要具体问题具体分析。</p><blockquote><p>解题策略</p></blockquote><p>贪心算法不从整体最优上加以考虑，所做出的仅是在某种意义上的局部最优选择。使用贪心策略要注意局部最优与全局最优的关系，选择当前的局部最优并不一定能推导出问题的全局最优。贪心策略解题需要解决以下两个问题；</p>',15),d=t("li",null,[t("p",null,"该问题是否适合使用贪心策略求解，也就是该问题是否具有贪心选择性质；")],-1),u=t("p",null,"制定贪心策略，以达到问题的最优解或较优解。",-1),m={href:"https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/5155524",target:"_blank",rel:"noopener noreferrer"},h=t("blockquote",null,[t("p",null,"存在问题")],-1),_=t("p",null,"贪心算法也存在如下问题：",-1),g=t("ol",null,[t("li",null,"不能保证解是最佳的。因为贪心算法总是从局部出发，并没从整体考虑；"),t("li",null,"贪心算法一般用来解决求最大或最小解；"),t("li",null,"贪心算法只能确定某些问题的可行性范围。")],-1),b=t("blockquote",null,[t("p",null,"应用实例")],-1),y=t("p",null,"例如，平时购物找零钱时，为使找回的零钱的硬币数最少，不要求找零钱的所有方案，而是从最大面值的币种开始，按递减的顺序考虑各面额，先尽量用大面值的面额，当不足大面值时才去考虑下一个较小面值，这就是贪心算法",-1);function k(f,q){const o=r("ExternalLinkIcon");return i(),n("div",null,[s,t("ol",null,[d,t("li",null,[u,t("p",null,[e("要确定一个问题是否适合用贪心算法求解，必须证明每一步所作的贪心选择最终导致问题的整体最优解。证明的大致过程为：首先考察问题的一个整体最优解，并证明可修改这个最优解，使其以贪心选择开始，做了贪心选择后，原问题简化为规模更小的类似子问题。然后用"),t("a",m,[e("数学归纳法"),a(o)]),e("证明通过每一步做贪心选择，最终可得到问题的整体最优解。")])])]),h,_,g,b,y])}const x=l(c,[["render",k],["__file","greedy.html.vue"]]),B=JSON.parse('{"path":"/code/data-structure-and-algorithms/algorithms/greedy.html","title":"贪心算法","lang":"zh-CN","frontmatter":{"order":9,"title":"贪心算法","date":"2021-01-08T00:00:00.000Z","category":"算法","tag":"算法","timeline":true,"article":true,"description":"贪心算法 贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。 算法思路 贪心算法一般按如下步骤进行： 建立数学模型来描述问题。 把求解的问题分成若干个子问题。 对每个子问题求解，得到子问题的局部最优解。 把子问题的解局部最优解合成原来解问题的一个解。 ​...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/data-structure-and-algorithms/algorithms/greedy.html"}],["meta",{"property":"og:title","content":"贪心算法"}],["meta",{"property":"og:description","content":"贪心算法 贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。 算法思路 贪心算法一般按如下步骤进行： 建立数学模型来描述问题。 把求解的问题分成若干个子问题。 对每个子问题求解，得到子问题的局部最优解。 把子问题的解局部最优解合成原来解问题的一个解。 ​..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-26T03:44:22.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2021-01-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-26T03:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贪心算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-26T03:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1716652325000,"updatedTime":1716695062000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":4.72,"words":1415},"filePathRelative":"code/data-structure-and-algorithms/algorithms/greedy.md","localizedDate":"2021年1月8日","excerpt":"\\n<p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p>","autoDesc":true}');export{x as comp,B as data};
