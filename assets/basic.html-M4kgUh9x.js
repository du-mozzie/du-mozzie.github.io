import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as d,h as r}from"./app-DyBSR7T2.js";const a={},o=r('<p>本文介绍一些 ElasticSearch 的基本概念</p><h2 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构"><span>基本结构</span></a></h2><ul><li>索引（index）：一个 ES 索引包含一个或多个物理分片，它只是这些分片的逻辑命名空间</li><li>文档（document）：最基础的可被索引的数据单元，如一个 JSON 串</li><li>分片（shards）：一个分片是一个底层的工作单元，它仅保存全部数据中的一部分，它是一个 Lucence 实例 (一个 lucene 索引最大包含 2,147,483,519 (= Integer.MAX_VALUE - 128)个文档数量)</li><li>分片备份（replicas）：分片备份，用于保障数据安全与分担检索压力</li></ul><p>ES 依赖一个重要的组件 Lucene，关于数据结构的优化通常来说是对 Lucene 的优化，它是集群的一个存储于检索工作单元，结构如下图：</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696928010954-4d47c7be-f075-4325-841c-876c743c6591.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Lucene 中，分为索引(录入)与检索(查询)两部分，索引部分包含分词器、过滤器、字符映射器等，检索部分包含查询解析器等。</p><p>一个 Lucene 索引包含多个 segments，一个 segment 包含多个文档，每个文档包含多个字段，每个字段经过分词后形成一个或多个 term。</p><p>通过 Luke 工具查看 ES 的 lucene 文件如下，主要增加了_id 和 _source 字段:</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696928475614-f1e24e28-908a-456c-83fe-02e9fcf816d4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="lucene-索引" tabindex="-1"><a class="header-anchor" href="#lucene-索引"><span>Lucene 索引</span></a></h2><p>Lucene 索引文件结构主要分为：词典、倒排表、正向文件、DocValues 等，如下图：</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696929260382-a546b876-578a-413a-b3d9-68f7b6146f60.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696929815228-af4be032-3a11-410a-a4a2-9e05961b5f51.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ES 中一个索引由一个或多个 lucene 索引构成，一个 lucene 索引由一个或多个 segment 构成，其中 segment 是最小的检索域。</p><p>数据具体被存储到哪个分片上：shard = hash(routing) % number_of_primary_shards</p><p>默认情况下 routing 参数是文档 ID (murmurhash3),可通过 URL 中的 _routing 参数指定数据分布在同一个分片中，index 和 search 的时候都需要一致才能找到数据，如果能明确根据_routing 进行数据分区，则可减少分片的检索工作，以提高性能。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><p>以下是Elasticsearch中常见的数据类型及其特性：</p><table><thead><tr><th>数据类型</th><th>描述</th><th>默认长度或格式</th><th>示例</th></tr></thead><tbody><tr><td>text</td><td>用于全文搜索的文本。会进行分词处理。</td><td>不固定</td><td>&quot;Elasticsearch is cool&quot;</td></tr><tr><td>keyword</td><td>适用于过滤、排序、聚合的文本，不会进行分词处理。</td><td>不固定，但建议长度不超过32766字节</td><td>&quot;user_id&quot;</td></tr><tr><td>integer</td><td>32位有符号整数。</td><td>32位</td><td>42</td></tr><tr><td>long</td><td>64位有符号整数。</td><td>64位</td><td>9223372036854775807</td></tr><tr><td>float</td><td>32位IEEE 754浮点数。</td><td>32位</td><td>3.14</td></tr><tr><td>double</td><td>64位IEEE 754浮点数。</td><td>64位</td><td>3.141592653589793</td></tr><tr><td>boolean</td><td>布尔值，true 或 false。</td><td>1位</td><td>true</td></tr><tr><td>date</td><td>日期类型，支持多种格式。</td><td>ISO 8601 或指定的格式</td><td>&quot;2023-06-13T18:30:00Z&quot;</td></tr><tr><td>binary</td><td>二进制数据。</td><td>不固定</td><td>&quot;U29tZSBiaW5hcnkgZGF0YQ==&quot;</td></tr><tr><td>range</td><td>表示范围的类型，如整数范围、浮点数范围、日期范围等。</td><td>根据子类型不同而不同</td><td>{ &quot;gte&quot;: 10, &quot;lt&quot;: 20 }</td></tr><tr><td>ip</td><td>IP地址，支持IPv4和IPv6。</td><td>IPv4：32位，IPv6：128位</td><td>&quot;192.168.1.1&quot;</td></tr><tr><td>object</td><td>JSON对象，可以包含多个属性。</td><td>不固定</td><td>{ &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30 }</td></tr><tr><td>nested</td><td>类似于object，但可以进行嵌套的复杂查询。</td><td>不固定</td><td>{ &quot;comments&quot;: [ { &quot;author&quot;: &quot;John&quot;, &quot;text&quot;: &quot;Great post!&quot; } ] }</td></tr><tr><td>geo_point</td><td>地理位置，表示经纬度。</td><td>不固定</td><td>{ &quot;lat&quot;: 40.7128, &quot;lon&quot;: -74.0060 }</td></tr><tr><td>geo_shape</td><td>地理形状，如点、多边形等。</td><td>不固定</td><td>{ &quot;type&quot;: &quot;polygon&quot;, &quot;coordinates&quot;: [ [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0] ] ] }</td></tr></tbody></table><p>补充说明：</p><ul><li><strong>text vs keyword</strong>：text类型用于需要进行全文搜索的字段，如文章内容；keyword类型用于需要进行精确匹配、不分词的字段，如用户名、标签等。</li><li><strong>date类型的格式</strong>：默认使用ISO 8601格式（例如：&quot;2023-06-13T18:30:00Z&quot;），但也可以自定义格式，例如：&quot;yyyy/MM/dd HH:mm&quot;。</li><li><strong>geo_point和geo_shape</strong>：用于地理位置数据处理，其中geo_point用于单个地理位置，geo_shape用于复杂的地理形状，如多边形。</li></ul><h3 id="mapping可用字段" tabindex="-1"><a class="header-anchor" href="#mapping可用字段"><span>Mapping可用字段</span></a></h3><h4 id="基本字段类型" tabindex="-1"><a class="header-anchor" href="#基本字段类型"><span>基本字段类型</span></a></h4><table><thead><tr><th>字段类型</th><th>描述</th><th>常见属性</th></tr></thead><tbody><tr><td>text</td><td>用于全文搜索的文本。会被分析。</td><td>analyzer, boost, eager_global_ordinals, fielddata, fields, index, index_options, norms, position_increment_gap, store, term_vector</td></tr><tr><td>keyword</td><td>不进行分析的精确值。适用于排序、聚合和精确过滤。</td><td>boost, eager_global_ordinals, fields, ignore_above, index, norms, split_queries_on_whitespace, store</td></tr><tr><td>integer</td><td>32位有符号整数。</td><td>coerce, boost, doc_values, ignore_malformed, index, null_value, store</td></tr><tr><td>long</td><td>64位有符号整数。</td><td>coerce, boost, doc_values, ignore_malformed, index, null_value, store</td></tr><tr><td>float</td><td>32位单精度浮点数。</td><td>coerce, boost, doc_values, ignore_malformed, index, null_value, store</td></tr><tr><td>double</td><td>64位双精度浮点数。</td><td>coerce, boost, doc_values, ignore_malformed, index, null_value, store</td></tr><tr><td>boolean</td><td>true 或 false 值。</td><td>boost, doc_values, index, null_value, store</td></tr><tr><td>date</td><td>日期类型，支持多种格式。默认格式为 strict_date_optional_time</td><td></td></tr><tr><td>binary</td><td>基础64编码的二进制值。</td><td>doc_values, store</td></tr><tr><td>range</td><td>范围类型，支持 integer_range, float_range, long_range, double_range, date_range。</td><td>coerce, boost, doc_values, index, store</td></tr></tbody></table><h4 id="复杂字段类型" tabindex="-1"><a class="header-anchor" href="#复杂字段类型"><span>复杂字段类型</span></a></h4><table><thead><tr><th>字段类型</th><th>描述</th><th>常见属性</th></tr></thead><tbody><tr><td>object</td><td>JSON对象。</td><td>enabled, dynamic, properties</td></tr><tr><td>nested</td><td>类似于 object，但可以独立地索引、查询。</td><td>enabled, dynamic, properties</td></tr><tr><td>geo_point</td><td>用于地理位置的经纬度点。</td><td>ignore_malformed, ignore_z_value, null_value</td></tr><tr><td>geo_shape</td><td>复杂的地理形状，如多边形。</td><td>ignore_malformed, tree, precision, strategy, orientation, points_only</td></tr><tr><td>ip</td><td>IPv4和IPv6地址。</td><td>boost, doc_values, index, null_value, store</td></tr><tr><td>completion</td><td>用于自动完成建议的类型。</td><td>analyzer, preserve_separators, preserve_position_increments, max_input_length, contexts</td></tr><tr><td>token_count</td><td>计算分析后的词元数量，用于评分计算。</td><td>analyzer, boost, doc_values, index, null_value, store</td></tr><tr><td>percolator</td><td>用于存储查询以便将来匹配文档。</td><td>无</td></tr></tbody></table><h4 id="特殊字段属性" tabindex="-1"><a class="header-anchor" href="#特殊字段属性"><span>特殊字段属性</span></a></h4><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>boost</td><td>用于在查询时调整字段的相关性得分。</td></tr><tr><td>analyzer</td><td>指定用于字段的分析器。只适用于 text 和 completion 类型。</td></tr><tr><td>coerce</td><td>是否尝试将值强制转换为正确的类型。适用于 number 和 date 类型。</td></tr><tr><td>doc_values</td><td>是否为字段生成排序和聚合所需的倒排索引。大多数字段类型默认为 true。</td></tr><tr><td>ignore_above</td><td>如果字符串长度超过此值，则不会被索引。适用于 keyword 类型。</td></tr><tr><td>ignore_malformed</td><td>是否忽略格式错误的值。适用于 number 和 date 类型。</td></tr><tr><td>index</td><td>是否对字段进行索引，使其可搜索。</td></tr><tr><td>null_value</td><td>在索引时将null值替换为指定的值。适用于 number, date, boolean, keyword, ip 等类型。</td></tr><tr><td>store</td><td>是否单独存储字段值而不只是索引。默认为 false。</td></tr><tr><td>fields</td><td>允许为同一字段定义多种表示方式。适用于 text 和 keyword 类型。</td></tr><tr><td>format</td><td>指定日期格式。适用于 date 类型。</td></tr></tbody></table><p>通过这些字段类型和属性，Elasticsearch可以灵活地适应各种数据索引和搜索需求。定义合适的映射能够显著提升搜索性能和准确性。</p>',30),i=[o];function n(c,s){return e(),d("div",null,i)}const p=t(a,[["render",n],["__file","basic.html.vue"]]),h=JSON.parse('{"path":"/code/distributed/elasticsearch/basic.html","title":"基本概念","lang":"zh-CN","frontmatter":{"order":2,"title":"基本概念","date":"2022-03-16T00:00:00.000Z","category":["ElasticSearch","分布式","搜索引擎"],"tag":["ElasticSearch","分布式","搜索引擎"],"timeline":true,"article":true,"description":"本文介绍一些 ElasticSearch 的基本概念 基本结构 索引（index）：一个 ES 索引包含一个或多个物理分片，它只是这些分片的逻辑命名空间 文档（document）：最基础的可被索引的数据单元，如一个 JSON 串 分片（shards）：一个分片是一个底层的工作单元，它仅保存全部数据中的一部分，它是一个 Lucence 实例 (一个 lu...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/distributed/elasticsearch/basic.html"}],["meta",{"property":"og:title","content":"基本概念"}],["meta",{"property":"og:description","content":"本文介绍一些 ElasticSearch 的基本概念 基本结构 索引（index）：一个 ES 索引包含一个或多个物理分片，它只是这些分片的逻辑命名空间 文档（document）：最基础的可被索引的数据单元，如一个 JSON 串 分片（shards）：一个分片是一个底层的工作单元，它仅保存全部数据中的一部分，它是一个 Lucence 实例 (一个 lu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696928010954-4d47c7be-f075-4325-841c-876c743c6591.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T03:35:17.000Z"}],["meta",{"property":"article:author","content":"Du"}],["meta",{"property":"article:tag","content":"ElasticSearch"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"搜索引擎"}],["meta",{"property":"article:published_time","content":"2022-03-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T03:35:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本概念\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696928010954-4d47c7be-f075-4325-841c-876c743c6591.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696928475614-f1e24e28-908a-456c-83fe-02e9fcf816d4.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696929260382-a546b876-578a-413a-b3d9-68f7b6146f60.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/1696929815228-af4be032-3a11-410a-a4a2-9e05961b5f51.png\\"],\\"datePublished\\":\\"2022-03-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-13T03:35:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Du\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"基本结构","slug":"基本结构","link":"#基本结构","children":[]},{"level":2,"title":"Lucene 索引","slug":"lucene-索引","link":"#lucene-索引","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"Mapping可用字段","slug":"mapping可用字段","link":"#mapping可用字段","children":[]}]}],"git":{"createdTime":1718249717000,"updatedTime":1718249717000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1642},"filePathRelative":"code/distributed/elasticsearch/basic.md","localizedDate":"2022年3月16日","excerpt":"<p>本文介绍一些 ElasticSearch 的基本概念</p>","autoDesc":true}');export{p as comp,h as data};
