import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,h as i}from"./app-CwsztSG9.js";const o={},a=i('<h1 id="动态规划-dp" tabindex="-1"><a class="header-anchor" href="#动态规划-dp"><span>动态规划(DP)</span></a></h1><p>滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p><p>算法核心：<mark>记住已经解决过的子问题的解</mark></p><p><strong>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解</strong></p><blockquote><p>记住求解的方式有两种 1、自顶向下的备忘录法 2、自底向上。</p></blockquote><p>​ 在求解问题中,对于每一步决策,列出各种可能的局部解,再依据某种判定条件，舍弃那些肯定不能得到最优解的局部解,在每一步都经过筛选,以每一步都是最优解来保证全局是最优解。</p><h2 id="树形dp套路" tabindex="-1"><a class="header-anchor" href="#树形dp套路"><span>树形DP套路</span></a></h2><ol><li>以某个节点X为头节点的子树中，分析答案有哪些可能性，并且这种分析是以X的左子树、X的右子树和X整棵树的角度来考虑可能性的</li><li>根据第一步的可能性分析，列出所有需要的信息</li><li>合并第二步的信息，对左树和右树提出同样的要求，并写出信息结构</li><li>设计递归函数，递归函数是处理以X为头节点的情况下的答案。 包括设计递归的basecase，默认直接得到左树和右树的所有信息，以及把可能性做整合，并且要返回第三步的信息结构这四个小步骤</li></ol><p>一般都要用到查表</p><h2 id="做题策略" tabindex="-1"><a class="header-anchor" href="#做题策略"><span>做题策略</span></a></h2><blockquote><p>暴力递归和动态规划的关系</p></blockquote><ul><li>某一个暴力递归，有解的重复调用，就可以把这个暴力递归优化成动态规划</li><li>任何动态规划问题，都一定对应着某一个有重复过程的暴力递归，但不是所有的暴力递归，都一定对应着动态规划</li></ul><blockquote><p>如何找到某个问题的动态规划方式？</p></blockquote><ol><li>设计暴力递归：重要原则+4种常见尝试模型！重点！ <ul><li>从左往右的尝试模型</li><li>范围上的尝试模型</li><li>多样本位置全对应的尝试模型</li><li>寻找业务限制的尝试模型</li></ul></li><li>分析有没有重复解：套路解决</li><li>用记忆化搜索-&gt;用严格表结构实现动态规划：套路解决</li><li>看看能否继续优化：套路解决</li></ol><blockquote><p>面试中设计暴力递归过程的原则</p></blockquote><ol><li>每一个可变参数的类型，一定不要比int类型更加复杂</li><li>原则1 可以违反，让类型突破到一维线性结构，那必须是单一可变参数</li><li>如果发现原则1 被违反，但不违反原则2 ，只需要做到记忆化搜索即可</li><li>可变参数的个数，能少则少</li></ol><blockquote><p>如何分析有没有重复解</p></blockquote><ol><li>列出调用过程，可以只列出前几层</li><li>有没有重复解，一看便知</li></ol><blockquote><p>暴力递归到动态规划的套路</p></blockquote><ol><li>你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用</li><li>找到哪些参数的变化会影响返回值，对每一个列出变化范围</li><li>参数间的所有的组合数量，意味着表大小</li><li>记忆化搜索的方法就是傻缓存，非常容易得到</li><li>规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解</li><li>对于有枚举行为的决策过程，进一步优化</li></ol><blockquote><p>动态规划的进一步优化</p></blockquote><ol><li>空间压缩</li><li>状态化简</li><li>四边形不等式</li><li>其他优化技巧</li></ol><p>知道了面试中设计暴力递归过程的原则，然后呢？一定要逼自己找到不违反原则情况下的暴力尝试！如果你找到的暴力尝试，不符合原则，马上舍弃！找新的！如果某个题目突破了设计原则，一定极难极难，面试中出现概率低于5%！</p>',23),r=[a];function p(c,n){return e(),l("div",null,r)}const m=t(o,[["render",p],["__file","dp.html.vue"]]),u=JSON.parse('{"path":"/code/data-structure-and-algorithms/algorithms/dp.html","title":"动态规划","lang":"zh-CN","frontmatter":{"order":8,"title":"动态规划","date":"2021-01-07T00:00:00.000Z","category":"算法","tag":"算法","timeline":true,"article":true,"description":"动态规划(DP) 滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/data-structure-and-algorithms/algorithms/dp.html"}],["meta",{"property":"og:title","content":"动态规划"}],["meta",{"property":"og:description","content":"动态规划(DP) 滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T15:11:23.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2021-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T15:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态规划\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T15:11:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"树形DP套路","slug":"树形dp套路","link":"#树形dp套路","children":[]},{"level":2,"title":"做题策略","slug":"做题策略","link":"#做题策略","children":[]}],"git":{"createdTime":1716652325000,"updatedTime":1719328283000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":3}]},"readingTime":{"minutes":3.92,"words":1177},"filePathRelative":"code/data-structure-and-algorithms/algorithms/dp.md","localizedDate":"2021年1月7日","excerpt":"\\n<p>滚动数组是DP中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p>","autoDesc":true}');export{m as comp,u as data};
