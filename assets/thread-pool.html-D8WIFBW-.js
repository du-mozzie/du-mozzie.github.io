import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,h as t}from"./app-DKU2k-SP.js";const p={},e=t(`<h2 id="配置一个自己的线程池" tabindex="-1"><a class="header-anchor" href="#配置一个自己的线程池"><span>配置一个自己的线程池</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolConfigProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">threadPoolExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolConfigProperties</span> pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                pool<span class="token punctuation">.</span><span class="token function">getCoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                pool<span class="token punctuation">.</span><span class="token function">getMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                pool<span class="token punctuation">.</span><span class="token function">getKeepAliveTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 被拒绝的任务抛出异常</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;thread.pool&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfigProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> coreSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> keepAliveTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">thread</span><span class="token punctuation">:</span>
  <span class="token key atrule">pool</span><span class="token punctuation">:</span>
    <span class="token key atrule">core-size</span><span class="token punctuation">:</span> <span class="token number">20</span>
    <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token number">200</span>
    <span class="token key atrule">keep-alive-time</span><span class="token punctuation">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异步编排" tabindex="-1"><a class="header-anchor" href="#异步编排"><span>异步编排</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ProductDetailVo</span> <span class="token function">findByProductId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductDetailVo</span><span class="token punctuation">&gt;</span></span> infoFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询商品信息</span>
        <span class="token class-name">ProductModel</span> model <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;is_publish&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token class-name">BizExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_NOT_EXIST</span><span class="token punctuation">,</span> <span class="token string">&quot;ProductServiceImpl : findById &quot;</span> <span class="token operator">+</span>
                       <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ProductDetailVo</span><span class="token punctuation">.</span><span class="token function">fromModel</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">CompletableFuture</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> attrFuture <span class="token operator">=</span> infoFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrVo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setProductAttrVos</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查询商品属性</span>
        <span class="token class-name">List</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttributeValueModel</span><span class="token punctuation">&gt;</span></span> productAttributeValues <span class="token operator">=</span>
            productAttributeValueMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttributeValueModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>
                <span class="token string">&quot;product_id&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查询商品属性名称</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProductAttributeValueModel</span> productAttributeValueModel <span class="token operator">:</span> productAttributeValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ProductAttrVo</span> productAttrVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductAttrVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 查询属性名称</span>
            <span class="token class-name">ProductAttributeModel</span> productAttributeModel <span class="token operator">=</span>
                productAttributeMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttributeModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                 <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
                                                     productAttributeValueModel<span class="token punctuation">.</span><span class="token function">getProductAttributeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                 <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                                                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>productAttributeModel<span class="token punctuation">,</span> <span class="token class-name">BizExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_ATTR_NAME_NOT_EXIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 组合属性名称跟属性值</span>
            productAttrVo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>productAttributeModel<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productAttrVo<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>productAttributeValueModel<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productAttrVo<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>productAttributeValueModel<span class="token punctuation">.</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>productAttrVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> buyImageFuture <span class="token operator">=</span> infoFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询购买页商品图片</span>
        <span class="token class-name">List</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductBuyImageVo</span><span class="token punctuation">&gt;</span></span> productBuyImageVoList <span class="token operator">=</span>
            productBuyImageMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductBuyImageModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>
                <span class="token string">&quot;product_id&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ProductBuyImageVo</span><span class="token operator">::</span><span class="token function">fromModel</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setBuyImages</span><span class="token punctuation">(</span>productBuyImageVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> specFuture <span class="token operator">=</span> infoFuture<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询商品规格</span>
        <span class="token class-name">List</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuStockVo</span><span class="token punctuation">&gt;</span></span> skuStockVoList <span class="token operator">=</span>
            skuStockMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span>\\<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuStockModel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>
                <span class="token string">&quot;product_id&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SkuStockVo</span><span class="token operator">::</span><span class="token function">fromModel</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setSkuStockVos</span><span class="token punctuation">(</span>skuStockVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProductDetailVo</span> productDetailVo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 等待异步任务都完成</span>
        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>attrFuture<span class="token punctuation">,</span> buyImageFuture<span class="token punctuation">,</span> specFuture<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        productDetailVo <span class="token operator">=</span> infoFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">thrown</span><span class="token punctuation">(</span><span class="token class-name">BizExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_NOT_EXIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> productDetailVo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发"><span>并发</span></a></h2><ol><li><p>服务单一职责+独立部署</p><p>秒杀服务即使自己扛不住压力，挂掉，不要影响其他服务</p></li><li><p>秒杀链接加密</p><p>防止恶意攻击，模拟秒杀请求，1000次/s攻击</p><p>防止链接暴露，自己工作人员，提前秒杀商品</p></li><li><p>库存预热+快速扣减</p><p>秒杀读多写少。无需每次实时校验库存。我们库存预热，放到redis中。信号量控制进来秒杀的请求</p></li><li><p>动静分离</p><p>nginx做好动静分离。保证秒杀和商品详情页的动态请求才打到后端的服务集群。</p><p>使用CDN网络，分担本集群压力</p></li><li><p>恶意请求拦截</p><p>识别非法攻击请求进行拦截，网关层</p></li><li><p>流量错峰</p><p>使用各种手段，讲流量分担到更大宽度的时间点。比如验证码，加入购物车</p></li><li><p>限流&amp;熔断&amp;降级</p><p>前端限流+后端限流</p><p>限制次数，限制总量，快速失败降级运行，熔断隔离防止雪崩</p></li><li><p>队列削峰</p><p>1万个商品，每个1000件秒杀。双11所有秒杀成功的请求，进入队列，慢慢创建订单，扣减库存即可</p></li></ol><p><mark>高并发三大处理手段</mark></p><ul><li>缓存（Redis）</li><li>异步（ThreadPoolExecutor, CompletableFuture）</li><li>队排好（RabbitMQ）</li></ul>`,10),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","thread-pool.html.vue"]]),d=JSON.parse('{"path":"/code/spring/boot/thread-pool.html","title":"线程池","lang":"zh-CN","frontmatter":{"order":13,"title":"线程池","date":"2021-10-16T00:00:00.000Z","category":["Spring Boot"],"tag":["Spring Boot"],"timeline":true,"article":true,"description":"配置一个自己的线程池 异步编排 并发 服务单一职责+独立部署 秒杀服务即使自己扛不住压力，挂掉，不要影响其他服务 秒杀链接加密 防止恶意攻击，模拟秒杀请求，1000次/s攻击 防止链接暴露，自己工作人员，提前秒杀商品 库存预热+快速扣减 秒杀读多写少。无需每次实时校验库存。我们库存预热，放到redis中。信号量控制进来秒杀的请求 动静分离 nginx做...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/spring/boot/thread-pool.html"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"配置一个自己的线程池 异步编排 并发 服务单一职责+独立部署 秒杀服务即使自己扛不住压力，挂掉，不要影响其他服务 秒杀链接加密 防止恶意攻击，模拟秒杀请求，1000次/s攻击 防止链接暴露，自己工作人员，提前秒杀商品 库存预热+快速扣减 秒杀读多写少。无需每次实时校验库存。我们库存预热，放到redis中。信号量控制进来秒杀的请求 动静分离 nginx做..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:54:15.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2021-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"配置一个自己的线程池","slug":"配置一个自己的线程池","link":"#配置一个自己的线程池","children":[]},{"level":2,"title":"异步编排","slug":"异步编排","link":"#异步编排","children":[]},{"level":2,"title":"并发","slug":"并发","link":"#并发","children":[]}],"git":{"createdTime":1721987655000,"updatedTime":1721987655000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"code/spring/boot/thread-pool.md","localizedDate":"2021年10月16日","excerpt":"<h2>配置一个自己的线程池</h2>","autoDesc":true}');export{r as comp,d as data};
