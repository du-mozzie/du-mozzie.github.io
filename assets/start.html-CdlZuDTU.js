import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,h as a}from"./app-Bxwd4Xi4.js";const t={},s=a(`<h1 id="springboot启动过程" tabindex="-1"><a class="header-anchor" href="#springboot启动过程"><span>SpringBoot启动过程</span></a></h1><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210009066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>创建SpringBootApplication</p><ul><li><p>保存了资源加载器resourceLoader</p></li><li><p>断言primarySources是否为空</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210133874.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>保存SpringBootApplication启动类的位置到this.primarySources</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210614995.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>判断web应用的类型webApplicationType</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210810798.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210832813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>bootstrappers</strong>初始启动引导器（List&lt;Bootstrapper&gt;）去spring.factories中找org.springframework.boot.<code>Bootstrapper</code>类型的配置</p></li><li><p>setInitializers去spring.factories中找<mark>ApplicationContextInitializer</mark>，保存List&lt;ApplicationContextInitializer&lt;?&gt;&gt; initializers</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606221653519.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>setListeners去spring.factories找<mark>ApplicationListener</mark>应用监听器，保存List&lt;ApplicationListener&lt;?&gt;&gt; listeners</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606221803399.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>mainApplicationClass找到主程序this.mainApplicationClass = deduceMainApplicationClass();</p><p>main方法下的</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606222240560.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li><li><p>运行SpringBootApplication</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606223245039.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>创建<strong>StopWatch</strong>，停止监听器，监听应用创建时长</p></li><li><p>开启<strong>StopWatch</strong>，记录应用启动时间</p></li><li><p>创建引导上下文(Context环境)，createBootstrapContext()</p><ul><li><p>创建默认的DefaultBootstrapContext</p></li><li><p>遍历配置的<strong>bootstrappers</strong>初始启动引导器<code>在spring.factories找到的</code>，调用Bootstrapper的intitialize方法，来完成对引导启动器上下文环境设置，<code>this.bootstrappers.forEach((initializer) -&gt; initializer.intitialize(bootstrapContext));</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Bootstrapper</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * Initialize the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BootstrapRegistry</span></span><span class="token punctuation">}</span> with any required registrations.
    * <span class="token keyword">@param</span> <span class="token parameter">registry</span> the registry to initialize
    */</span>
   <span class="token keyword">void</span> <span class="token function">intitialize</span><span class="token punctuation">(</span><span class="token class-name">BootstrapRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>创建应用上下文配置
<span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>让当前应用进入headless模式，<strong>java.awt.headless</strong></p></li><li><p><strong>获取所有getRunListeners（运行监听器）</strong><code>为了方便所有Listener进行事件感知</code></p><ul><li><p>getRunListeners去spring.factories找<mark>SpringApplicationRunListener</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607002052432.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607002524457.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li><li><p>遍历所有的SpringApplicationRunListeners，调用starting方法</p><ul><li><code>相当于通知所有感兴趣系统正在启动的人，项目正在starting</code></li></ul></li><li><p>保存命令行参数：ApplicationArguments</p></li><li><p>准备环境信息：prepareEnvironment</p><ul><li><p>返回或者创建基础环境信息对象：getOrCreateEnvironment</p><p>当前环境是：StandardServletEnvironment</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607004046206.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>配置环境信息对象：configureEnvironment(environment, applicationArguments.getSourceArgs());</p><ul><li>读取所有的配置源的配置属性值：configurePropertySources(environment, args);</li></ul></li><li><p>绑定环境信息：ConfigurationPropertySources.attach(environment);</p></li><li><p>监听器调用<code>listeners.environmentPrepared()方法</code>，通知所有的监听器当前环境准备完成</p></li></ul></li><li><p>创建IOC容器信息<code>createApplicationContext()</code></p><ul><li>会根据项目类型（servlet）创建容器</li><li>当前会创建<strong>AnnotationConfigServletWebServerApplicationContext</strong></li></ul></li><li><p>准备ApplicationContext IOC容器的基本信息 prepareContext()</p><ul><li><p>保存环境信息</p></li><li><p>IOC容器的后置处理流程</p></li><li><p>应用初始化器applyInitializers；</p><ul><li><p>遍历所有的<mark>ApplicationContextInitializer</mark>，调用initialize，来对IOC容器进行初始化扩展</p></li><li><p>遍历所有的listener调用contextprepared，EventPublishingRunListener通知所有的监听器contextprepared</p><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607012444451.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li><li><p>所有的监听器调用contextLoaded，通知所有的监听器contextLoaded</p></li></ul></li><li><p>刷新IOC容器</p><ul><li>创建容器中的所有组件（spring底层）</li></ul></li><li><p>刷新完成后afterRefresh</p></li><li><p>stopWatch.stop();结束监听器，获取应用创建时长</p></li><li><p>所有监听器调用listeners.started(context);方法，通知监听器项目启动完成</p></li><li><p>调用所有的runners，callRunners(context, applicationArguments);</p><ul><li><p>获取容器中的<mark>ApplicationRunner</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Callback used to run the bean.
	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming application arguments
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error
	 */</span>
	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取容器中的<mark>CommandLineRunner</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Callback used to run the bean.
	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming main method arguments
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error
	 */</span>
	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>合并所有Runner，并且按照@Order进行排序</p></li><li><p>遍历所有的Runner，调用run()方法</p></li></ul></li><li><p>如果以上有异常，会调用监听器的listeners.failed(context, exception)方法，通知监听器有异常</p></li><li><p>调用所有监听器的listeners.running(context)方法，通知所有监听器项目进入running状态</p></li><li><p>如果running有问题，通知监听器failed，调用所有的监听器filed</p></li></ul></li></ol>`,3),o=[s];function p(r,l){return e(),i("div",null,o)}const g=n(t,[["render",p],["__file","start.html.vue"]]),m=JSON.parse('{"path":"/code/spring/boot/start.html","title":"SpringBoot启动过程","lang":"zh-CN","frontmatter":{"order":2,"title":"SpringBoot启动过程","date":"2021-10-10T00:00:00.000Z","category":["Spring Boot"],"tag":["Spring Boot"],"timeline":true,"article":true,"description":"SpringBoot启动过程 创建SpringBootApplication 保存了资源加载器resourceLoader 断言primarySources是否为空 保存SpringBootApplication启动类的位置到this.primarySources 判断web应用的类型webApplicationType bootstrappers初始...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/spring/boot/start.html"}],["meta",{"property":"og:title","content":"SpringBoot启动过程"}],["meta",{"property":"og:description","content":"SpringBoot启动过程 创建SpringBootApplication 保存了资源加载器resourceLoader 断言primarySources是否为空 保存SpringBootApplication启动类的位置到this.primarySources 判断web应用的类型webApplicationType bootstrappers初始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210009066.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:54:15.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2021-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot启动过程\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210009066.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210133874.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210614995.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210810798.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210832813.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606221653519.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606221803399.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606222240560.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606223245039.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607002052432.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607002524457.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607004046206.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210607012444451.png\\"],\\"datePublished\\":\\"2021-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1721987655000,"updatedTime":1721987655000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":1}]},"readingTime":{"minutes":2.81,"words":842},"filePathRelative":"code/spring/boot/start.md","localizedDate":"2021年10月10日","excerpt":"\\n<figure><img src=\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210606210009066.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{g as comp,m as data};
