import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,h as t}from"./app-DrvnTAc0.js";const e={},p=t(`<h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h1><p>Java注解（Annotation）是Java中的一种元数据机制，用于向代码中添加额外的信息。这些注解可以在编译时、类加载时、甚至在运行时被处理和利用，从而实现多种功能，例如代码生成、编译时检查、配置等。</p><p><strong>@开头的</strong></p><p>注解可以检查跟约束</p><p>@Override重写</p><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h2><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021172409599.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>du<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@MyAnnotation</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//定义一个注解</span>
<span class="token comment">//target    表示我们的注解可以用在哪</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//retention 表示注解在什么地方有效</span>
<span class="token comment">//RUNTIME&gt;CLASS&gt;SOURCE</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>

<span class="token comment">//document  表示是否将我们的注解生成在JAVAdoc中</span>
<span class="token annotation punctuation">@Documented</span>

<span class="token comment">//inherited 表示子类可以继承父类的注解</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021173008986.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021174814402.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><blockquote><p>在计算机学中，反射（英语：reflection）是指计算机程序在运行时（runtime）可以访问、检测和修改它本身状态或行为的一种能力。用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。</p></blockquote><figure><img src="https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210601233759277.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Field 类：提供有关类的属性信息，以及对它的动态访问权限。它是一个封装反射类的属性的类。</li><li>Constructor 类：提供有关类的构造方法的信息，以及对它的动态访问权限。它是一个封装反射类的构造方法的类。</li><li>Method 类：提供关于类的方法的信息，包括抽象方法。它是用来封装反射类方法的一个类。</li><li>Class 类：表示正在运行的 Java 应用程序中的类的实例。</li><li>Object 类：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。</li></ul><p>接下来，我们通过一个典型的例子来学习反射。先做准备工作，新建 com.test.reflection 包，在此包中新建一个 Student 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> studentAge<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> studentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>studentName <span class="token operator">=</span> studentName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>studentAge <span class="token operator">=</span> studentAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;show: &quot;</span> <span class="token operator">+</span> studentName <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> studentAge <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;testReturnValue&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Student 类中有两个<strong>字段</strong>、两个<strong>构造方法</strong>、两个<strong>函数</strong>，且都是一个私有，一个公有。由此可知，这个测试类基本涵盖了我们平时常用的所有类成员。</p><h3 id="_3-1-获取-class-对象的三种方式" tabindex="-1"><a class="header-anchor" href="#_3-1-获取-class-对象的三种方式"><span><strong>3.1 获取 Class 对象的三种方式</strong></span></a></h3><p>获取 Class 对象有三种方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>
<span class="token class-name">Class</span> studentClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.reflection.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.通过类的class属性</span>
<span class="token class-name">Class</span> studentClass2 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token comment">// 3.通过对象的getClass()函数</span>
<span class="token class-name">Student</span> studentObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> studentClass3 <span class="token operator">=</span> studentObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一种方法是通过类的全路径字符串获取 Class 对象，这也是我们平时最常用的反射获取 Class 对象的方法；</li><li>第二种方法有限制条件：需要导入类的包；</li><li>第三种方法已经有了 Student 对象，不再需要反射。</li></ul><p>通过这三种方式获取到的 Class 对象是同一个，也就是说 Java 运行时，每一个类只会生成一个 Class 对象。</p><p>我们将其打印出来测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;class1 = &quot;</span> <span class="token operator">+</span> studentClass <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;class2 = &quot;</span> <span class="token operator">+</span> studentClass2 <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;class3 = &quot;</span> <span class="token operator">+</span> studentClass3 <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;class1 == class2 ? &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass <span class="token operator">==</span> studentClass2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;class2 == class3 ? &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass2 <span class="token operator">==</span> studentClass3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>class1 = class com.test.reflection.Student
class2 = class com.test.reflection.Student
class3 = class com.test.reflection.Student
class1 == class2 ? true
class2 == class3 ? true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，拿到 Class 对象之后，我们就可以为所欲为啦！</p><h3 id="_3-2-获取成员变量" tabindex="-1"><a class="header-anchor" href="#_3-2-获取成员变量"><span><strong>3.2 获取成员变量</strong></span></a></h3><p>获取字段有两个 API：<code>getDeclaredFields</code>和<code>getFields</code>。他们的区别是:<code>getDeclaredFields</code>用于获取所有声明的字段，包括公有字段和私有字段，<code>getFields</code>仅用来获取公有字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.获取所有声明的字段</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;declared Field: &quot;</span> <span class="token operator">+</span> declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.获取所有公有的字段</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;field: &quot;</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>declared Field: private java.lang.String com.test.reflection.Student.studentName
declared Field: public int com.test.reflection.Student.studentAge
field: public int com.test.reflection.Student.studentAge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-获取构造方法" tabindex="-1"><a class="header-anchor" href="#_3-3-获取构造方法"><span><strong>3.3 获取构造方法</strong></span></a></h3><p>获取构造方法同样包含了两个 API：用于获取所有构造方法的 <code>getDeclaredConstructors</code>和用于获取公有构造方法的<code>getConstructors</code>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.获取所有声明的构造方法</span>
<span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">:</span> declaredConstructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;declared Constructor: &quot;</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.获取所有公有的构造方法</span>
<span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor <span class="token operator">:</span> constructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;constructor: &quot;</span> <span class="token operator">+</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>declared Constructor: public com.test.reflection.Student()
declared Constructor: private com.test.reflection.Student(java.lang.String)
constructor: public com.test.reflection.Student()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-获取非构造方法" tabindex="-1"><a class="header-anchor" href="#_3-4-获取非构造方法"><span><strong>3.4.获取非构造方法</strong></span></a></h3><p>同样地，获取非构造方法的两个 API 是：获取所有声明的非构造函数的 <code>getDeclaredMethods</code> 和仅获取公有非构造函数的 <code>getMethods</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.获取所有声明的函数</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;declared Method: &quot;</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.获取所有公有的函数</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;method: &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序，输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>declared Method: public void com.test.reflection.Student.setStudentAge(int)
declared Method: private java.lang.String com.test.reflection.Student.show(java.lang.String)
method: public void com.test.reflection.Student.setStudentAge(int)
method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
method: public boolean java.lang.Object.equals(java.lang.Object)
method: public java.lang.String java.lang.Object.toString()
method: public native int java.lang.Object.hashCode()
method: public final native java.lang.Class java.lang.Object.getClass()
method: public final native void java.lang.Object.notify()
method: public final native void java.lang.Object.notifyAll()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出中我们看到，<code>getMethods</code> 方法不仅获取到了我们声明的公有方法<code>setStudentAge</code>，还获取到了很多 Object 类中的公有方法。这是因为我们前文已说到：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。 而<code>getDeclaredMethods</code>是无法获取到父类中的方法的。</p><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span><strong>实践</strong></span></a></h3><p>学以致用，让我们来一个实际的应用感受一下。还是以 Student 类为例，如果此类在其他的包中，并且我们的需求是要在程序中通过反射获取他的构造方法，构造出 Student 对象，并且通过反射访问他的私有字段和私有方法。那么我们可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>
<span class="token class-name">Class</span> studentClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.reflection.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用&#39;,&#39;连接即可</span>
<span class="token class-name">Constructor</span> studentConstructor <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码</span>
studentConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用&#39;,&#39;连接即可</span>
<span class="token class-name">Object</span> student <span class="token operator">=</span> studentConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;NameA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.获取声明的字段，传入字段名</span>
<span class="token class-name">Field</span> studentAgeField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;studentAge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码</span>
<span class="token comment">// studentAgeField.setAccessible(true);</span>
<span class="token comment">// 使用字段的set方法设置字段值，传入此对象以及参数值</span>
studentAgeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用&#39;,&#39;连接即可</span>
<span class="token class-name">Method</span> studentShowMethod <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;show&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码</span>
studentShowMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用&#39;,&#39;连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可</span>
<span class="token class-name">Object</span> result <span class="token operator">=</span> studentShowMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序的逻辑注释已经写得很清晰了，我们再梳理一下：</p><ol><li>先用第一种全路径获取 Class 的方法获取到了 Student 的 Class 对象</li><li>然后反射调用它的私有构造方法 <code>private Student(String studentName)</code>，构建出 newInstance</li><li>再将其公有字段 studentAge 设置为 10</li><li>最后反射调用其私有方法 <code>show</code>，传入参数 “message”，并打印出这个方法的返回值。</li></ol><p>其中，<code>setAccessible</code> 函数用于动态获取访问权限，Constructor、Field、Method 都提供了此方法，让我们得以访问类中的私有成员。</p><p>运行程序，输出如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>show<span class="token operator">:</span> <span class="token class-name">NameA</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>message
result<span class="token operator">:</span> testReturnValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,53),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","annotation.html.vue"]]),k=JSON.parse('{"path":"/code/java/annotation.html","title":"注解","lang":"zh-CN","frontmatter":{"order":13,"title":"注解","date":"2021-06-25T00:00:00.000Z","category":"Java","tag":"Java","timeline":true,"article":true,"description":"注解 Java注解（Annotation）是Java中的一种元数据机制，用于向代码中添加额外的信息。这些注解可以在编译时、类加载时、甚至在运行时被处理和利用，从而实现多种功能，例如代码生成、编译时检查、配置等。 @开头的 注解可以检查跟约束 @Override重写 内置注解 元注解 自定义注解 反射 在计算机学中，反射（英语：reflection）是指...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/java/annotation.html"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"注解 Java注解（Annotation）是Java中的一种元数据机制，用于向代码中添加额外的信息。这些注解可以在编译时、类加载时、甚至在运行时被处理和利用，从而实现多种功能，例如代码生成、编译时检查、配置等。 @开头的 注解可以检查跟约束 @Override重写 内置注解 元注解 自定义注解 反射 在计算机学中，反射（英语：reflection）是指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021172409599.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T07:12:59.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-27T07:12:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解\\",\\"image\\":[\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021172409599.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021173008986.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20201021174814402.png\\",\\"https://raw.githubusercontent.com/du-mozzie/PicGo/master/images/image-20210601233759277.png\\"],\\"datePublished\\":\\"2021-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-27T07:12:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"内置注解","slug":"内置注解","link":"#内置注解","children":[]},{"level":2,"title":"元注解","slug":"元注解","link":"#元注解","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"3.1 获取 Class 对象的三种方式","slug":"_3-1-获取-class-对象的三种方式","link":"#_3-1-获取-class-对象的三种方式","children":[]},{"level":3,"title":"3.2 获取成员变量","slug":"_3-2-获取成员变量","link":"#_3-2-获取成员变量","children":[]},{"level":3,"title":"3.3 获取构造方法","slug":"_3-3-获取构造方法","link":"#_3-3-获取构造方法","children":[]},{"level":3,"title":"3.4.获取非构造方法","slug":"_3-4-获取非构造方法","link":"#_3-4-获取非构造方法","children":[]},{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]}]}],"git":{"createdTime":1716792269000,"updatedTime":1716793979000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":2}]},"readingTime":{"minutes":6.79,"words":2037},"filePathRelative":"code/java/annotation.md","localizedDate":"2021年6月25日","excerpt":"\\n<p>Java注解（Annotation）是Java中的一种元数据机制，用于向代码中添加额外的信息。这些注解可以在编译时、类加载时、甚至在运行时被处理和利用，从而实现多种功能，例如代码生成、编译时检查、配置等。</p>","autoDesc":true}');export{r as comp,k as data};
