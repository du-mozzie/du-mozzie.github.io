import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,h as t}from"./app-BuIWaePD.js";const e={},p=t(`<h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h1><p>Java基本概念，从安装Java环境到运算符的优先级，覆盖了Java程序开发中的关键内容。</p><h2 id="_1、安装-java-环境" tabindex="-1"><a class="header-anchor" href="#_1、安装-java-环境"><span>1、安装 Java 环境</span></a></h2><ul><li><p>编写 Java 代码</p></li><li><p>编译 Java 代码，成为字节码文件 16 进制</p><p>javac 文件名（带后缀）</p></li><li><p>让 JVM 执行字节码文件，运行程序 java 文件名（不带后缀）</p></li></ul><p>IDE：集成开发环境</p><p>Eclipse、IDEA</p><h2 id="_2、注释" tabindex="-1"><a class="header-anchor" href="#_2、注释"><span>2、注释</span></a></h2><p>注释就是用通俗易懂的语言对代码进行描述解释，方便自己和他人阅读。</p><ul><li>单行注释：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//注释内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>多行注释：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/*注释内容
注释内容
注释内容
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文档注释：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**注释内容
*注释内容
*注释内容
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、关键字" tabindex="-1"><a class="header-anchor" href="#_3、关键字"><span>3、关键字</span></a></h2><p>Java 语言预先定义好的，有指定意义的标识符，组成程序的基本元素。</p><table><thead><tr><th>abstract</th><th>表示抽象</th></tr></thead><tbody><tr><td>boolean</td><td>基本数据类型</td></tr><tr><td>break</td><td>跳出循环</td></tr><tr><td>byte</td><td>基本数据类型</td></tr><tr><td>case</td><td>与 switch 搭配使用</td></tr><tr><td>catch</td><td>与 try 搭配使用，表示捕获异常</td></tr><tr><td>char</td><td>基本数据类型</td></tr><tr><td>class</td><td>表示一个类</td></tr><tr><td>continue</td><td>跳出循环</td></tr><tr><td>do</td><td>与 while 搭配使用，表示循环</td></tr><tr><td>double</td><td>基本数据类型</td></tr><tr><td>else</td><td>与 if 搭配，流程控制</td></tr><tr><td>enum</td><td>枚举类型</td></tr><tr><td>extends</td><td>继承</td></tr><tr><td>final</td><td>修饰常量</td></tr><tr><td>float</td><td>基本数据类型</td></tr><tr><td>if</td><td>流程控制</td></tr><tr><td>implements</td><td>实现接口</td></tr><tr><td>import</td><td>引入某个类</td></tr><tr><td>int</td><td>基本数据类型</td></tr><tr><td>interface</td><td>表示接口</td></tr><tr><td>long</td><td>基本数据类型</td></tr><tr><td>native</td><td>表示本地方法</td></tr><tr><td>new</td><td>创建对象</td></tr><tr><td>package</td><td>表示包</td></tr><tr><td>private</td><td>私有</td></tr><tr><td>public</td><td>共有</td></tr><tr><td>return</td><td>返回值</td></tr><tr><td>short</td><td>基本数据类型</td></tr><tr><td>static</td><td>表示静态</td></tr><tr><td>super</td><td>表示父类</td></tr><tr><td>switch</td><td>与 case 搭配使用</td></tr><tr><td>synchronized</td><td>线程同步</td></tr><tr><td>this</td><td>表示当前实例</td></tr><tr><td>throw</td><td>抛出异常</td></tr><tr><td>throws</td><td>方法中主动抛出异常</td></tr><tr><td>try</td><td>与 catch 搭配使用</td></tr><tr><td>void</td><td>表示方法没有返回值</td></tr><tr><td>volatile</td><td>保证线程读取到最新值</td></tr><tr><td>while</td><td>表示循环</td></tr></tbody></table><h2 id="_4、变量" tabindex="-1"><a class="header-anchor" href="#_4、变量"><span>4、变量</span></a></h2><ul><li>数据类型</li><li>变量名</li><li>变量值</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>基本数据类型\`+\`引用数据类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5、使用变量" tabindex="-1"><a class="header-anchor" href="#_5、使用变量"><span>5、使用变量</span></a></h2><p>1、声明变量的数据类型和变量名（包含数字、字母、下划线、$，不能包含空格、运算符，不能用关键字命名，不能以数字开头），大小写可以混用，首单词应该小写，后续单词的首字母大写。</p><p>userId、studentName （驼峰式命名法）</p><p>2、给内存空间赋值，该值就是变量值。</p><h2 id="_6、java-的数据类型" tabindex="-1"><a class="header-anchor" href="#_6、java-的数据类型"><span>6、Java 的数据类型</span></a></h2><ul><li>基本数据类型</li></ul><p>byte、int、short、long、float、double、char、boolean</p><blockquote><p>数值类型（整数、小数）</p></blockquote><p>byte 1 个字节 (8位)</p><p>int 4 个字节（32位）</p><p>short 2 个字节（16位）</p><p>long 8 个字节（64位）</p><p>float 4 个字节（32位） 单精度浮点型</p><p>double 8 个字节（64位）双精度浮点型</p><blockquote><p>非数值类型（文本）</p></blockquote><p>char 2 个字节（16位）</p><p>boolean 1 个字节(8位)、判断逻辑是否成立 true 1/false 0</p><ul><li>引用数据类型</li></ul><h2 id="_7、数据类型转换" tabindex="-1"><a class="header-anchor" href="#_7、数据类型转换"><span>7、数据类型转换</span></a></h2><ul><li>自动转换</li></ul><p>Java 可以自动对某些数据类型进行自动转换。</p><p>规则：只能由<strong>低字节</strong>向<strong>高字节</strong>进行转换，反之则不行。</p><p>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</p><ul><li>强制类型转换</li></ul><p>Java 无法自动转换的数据类型，开发者可以通过强制手段进行转换。</p><p>一般来讲强制类型转换可能会造成精度损失。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、运算符" tabindex="-1"><a class="header-anchor" href="#_8、运算符"><span>8、运算符</span></a></h2><ul><li>赋值运算符</li></ul><p>数据类型 变量名 = 数值/变量;</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//1、创建变量用来记录张三的体重</span>
<span class="token keyword">double</span> weight1 <span class="token operator">=</span> <span class="token number">70.5</span><span class="token punctuation">;</span>
<span class="token comment">//2、创建变量表示李四的体重</span>
<span class="token keyword">double</span> weight2 <span class="token operator">=</span> <span class="token number">60.5</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换之前：张三的体重是&quot;</span><span class="token operator">+</span>weight1<span class="token operator">+</span><span class="token string">&quot;,李四的体重是&quot;</span><span class="token operator">+</span>weight2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进行交换&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> temp <span class="token operator">=</span> weight1<span class="token punctuation">;</span>
weight1 <span class="token operator">=</span> weight2<span class="token punctuation">;</span>
weight2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换之后：张三的体重是&quot;</span><span class="token operator">+</span>weight1<span class="token operator">+</span><span class="token string">&quot;,李四的体重是&quot;</span><span class="token operator">+</span>weight2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>算术运算符</p><ul><li><p>基本算术运算符</p><p>+、-、*、/、%、++、–</p><p>变量1 + 变量2</p><p>变量1 - 变量2</p><p>变量1 * 变量2</p><p>变量1 / 变量2</p><p>变量1 % 变量2</p><p>变量++、++变量</p><p>变量–、--变量</p><p>变量++：先操作，再运算。</p><p>++变量：先运算，再操作。</p></li><li><p>复合算术运算符</p><p>+=、-=、*=、/=、%=</p><p>变量1 += 变量2：先求出变量1和变量2之和，再把计算结果赋值给变量1，变量1 = 变量1 + 变量2</p></li></ul></li><li><p>关系运算符</p><p>==、!=、&gt;、&lt;、&gt;=、&lt;=</p></li><li><p>逻辑运算符</p></li></ul><p>逻辑运算符<strong>只能用于 boolean 类型</strong>的数据运算，判断 boolean 数据之间的逻辑关系，与、或、非。</p><p>&amp;（与）、｜（或）、!（非）、&amp;&amp;（短路与）、||（短路或）</p><p><strong>参与逻辑运算符的变量都是 boolean 的。</strong></p><p>1、变量1 &amp; 变量2：只有当变量 1 和变量 2 都为 true，结果为 true，否则为 false。 【A &amp; B AB都会执行】</p><p>2、变量1 ｜ 变量2：变量 1 和变量 2 只要有一个为 true，结果为 true，否则为 false。【A | B AB都会执行】</p><p>3、!变量1：若变量 1 为 true，结果为 false，若变量 1 为 false，结果为 true。</p><p>4、变量1 &amp;&amp; 变量2：只有当变量 1 和变量 2 都为 true，结果为 true，否则为 false。 【A &amp;&amp; B 若A为false，B不执行】</p><p>5、变量1 || 变量2：变量 1 和变量 2 只要有一个为 true，结果为 true，否则为 false。【A || B 若A为true，B不执行】</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>num1<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>num1<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">++</span>num1<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">++</span>num1<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、条件运算符" tabindex="-1"><a class="header-anchor" href="#_9、条件运算符"><span>9、条件运算符</span></a></h2><p>三元运算符、三目运算符、三元表达式</p><p>根据不同的条件给同一个变量赋不同的值，变量 = 条件?值1:值2.</p><h2 id="_10、位运算符" tabindex="-1"><a class="header-anchor" href="#_10、位运算符"><span>10、位运算符</span></a></h2><ul><li>十进制和二进制的转换</li></ul><blockquote><p>十进制转二进制：</p><p>目标数除以2，若能除尽，该位记做0，若除不尽，该位记做1，再对商继续除以2，以此类推，直到商为0，然后把每一位的结果反序组合就是对应的二进制。</p></blockquote><p>10：1010</p><p>17：10001</p><blockquote><p>二进制转十进制：</p><p>从目标数的最后侧起，本位的数值乘以本位的权重，权重就是2的第几位的位数减一次方，将每一位的值进行相加，得到的结果就是对应的十进制。</p></blockquote><p>位运算符：</p><ul><li>&amp;（按位与）</li><li>｜（按位或）</li><li>^（按位异或）</li><li>&lt;&lt;（左移）、&gt;&gt;（右移）</li></ul><blockquote><p>变量1 &amp; 变量2：先把变量 1 和变量 2 转为二进制，每一位的数字一一对应，进行比较判断，若都为 1，则该位记做 1，否则记做 0。</p></blockquote><blockquote><p>变量1 |变量2：先把变量 1 和变量 2 转为二进制，每一位的数字一一对应，进行比较判断，只要有一个为 1，则该位记做 1，否则记做 0。</p></blockquote><blockquote><p>变量1 ^ 变量2：先把变量 1 和变量 2 转为二进制，每一位的数字一一对应，进行比较判断，相同记做 0，不同记做 1。</p></blockquote><blockquote><p>变量1 &lt;&lt; 变量2：变量1乘以2的变量2次方</p></blockquote><p>2 &lt;&lt; 3 : 2 * 8 = 16</p><blockquote><p>变量1 &gt;&gt; 变量2：变量1除以2的变量2次方</p></blockquote><p>2 &gt;&gt; 3：2/8 = 0</p><h2 id="_11、运算符的优先级" tabindex="-1"><a class="header-anchor" href="#_11、运算符的优先级"><span>11、运算符的优先级</span></a></h2><p>!&gt;算术运算符&gt;关系运算符&gt;逻辑运算符(&amp;&amp;&gt;||)</p>`,81),o=[p];function l(c,i){return n(),s("div",null,o)}const u=a(e,[["render",l],["__file","basic-conception.html.vue"]]),k=JSON.parse('{"path":"/code/java/basic-conception.html","title":"基本概念","lang":"zh-CN","frontmatter":{"order":2,"title":"基本概念","date":"2021-02-20T00:00:00.000Z","category":"Java","tag":"Java","timeline":true,"article":true,"description":"基本概念 Java基本概念，从安装Java环境到运算符的优先级，覆盖了Java程序开发中的关键内容。 1、安装 Java 环境 编写 Java 代码 编译 Java 代码，成为字节码文件 16 进制 javac 文件名（带后缀） 让 JVM 执行字节码文件，运行程序 java 文件名（不带后缀） IDE：集成开发环境 Eclipse、IDEA 2、注释...","head":[["meta",{"property":"og:url","content":"https://du-mozzie.github.io/code/java/basic-conception.html"}],["meta",{"property":"og:title","content":"基本概念"}],["meta",{"property":"og:description","content":"基本概念 Java基本概念，从安装Java环境到运算符的优先级，覆盖了Java程序开发中的关键内容。 1、安装 Java 环境 编写 Java 代码 编译 Java 代码，成为字节码文件 16 进制 javac 文件名（带后缀） 让 JVM 执行字节码文件，运行程序 java 文件名（不带后缀） IDE：集成开发环境 Eclipse、IDEA 2、注释..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T07:12:59.000Z"}],["meta",{"property":"article:author","content":"mozzie"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-27T07:12:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-27T07:12:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"mozzie\\",\\"url\\":\\"https://du-mozzie.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、安装 Java 环境","slug":"_1、安装-java-环境","link":"#_1、安装-java-环境","children":[]},{"level":2,"title":"2、注释","slug":"_2、注释","link":"#_2、注释","children":[]},{"level":2,"title":"3、关键字","slug":"_3、关键字","link":"#_3、关键字","children":[]},{"level":2,"title":"4、变量","slug":"_4、变量","link":"#_4、变量","children":[]},{"level":2,"title":"5、使用变量","slug":"_5、使用变量","link":"#_5、使用变量","children":[]},{"level":2,"title":"6、Java 的数据类型","slug":"_6、java-的数据类型","link":"#_6、java-的数据类型","children":[]},{"level":2,"title":"7、数据类型转换","slug":"_7、数据类型转换","link":"#_7、数据类型转换","children":[]},{"level":2,"title":"8、运算符","slug":"_8、运算符","link":"#_8、运算符","children":[]},{"level":2,"title":"9、条件运算符","slug":"_9、条件运算符","link":"#_9、条件运算符","children":[]},{"level":2,"title":"10、位运算符","slug":"_10、位运算符","link":"#_10、位运算符","children":[]},{"level":2,"title":"11、运算符的优先级","slug":"_11、运算符的优先级","link":"#_11、运算符的优先级","children":[]}],"git":{"createdTime":1716652325000,"updatedTime":1716793979000,"contributors":[{"name":"du","email":"25484255238@qq.com","commits":3}]},"readingTime":{"minutes":5.98,"words":1794},"filePathRelative":"code/java/basic-conception.md","localizedDate":"2021年2月20日","excerpt":"\\n<p>Java基本概念，从安装Java环境到运算符的优先级，覆盖了Java程序开发中的关键内容。</p>","autoDesc":true}');export{u as comp,k as data};
